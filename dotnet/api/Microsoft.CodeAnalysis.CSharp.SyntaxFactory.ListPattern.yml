### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax&text=ListPatternSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: openBracketToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: patterns
    type: <xref href="Microsoft.CodeAnalysis.SeparatedSyntaxList`1?alt=Microsoft.CodeAnalysis.SeparatedSyntaxList&text=SeparatedSyntaxList" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax&text=PatternSyntax" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: closeBracketToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: designation
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax&text=VariableDesignationSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)
  name: ListPattern(SyntaxToken, SeparatedSyntaxList<PatternSyntax>, SyntaxToken, VariableDesignationSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern(SyntaxToken, SeparatedSyntaxList<PatternSyntax>, SyntaxToken, VariableDesignationSyntax)
  nameWithType: SyntaxFactory.ListPattern(SyntaxToken, SeparatedSyntaxList<PatternSyntax>, SyntaxToken, VariableDesignationSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax ListPattern (Microsoft.CodeAnalysis.SyntaxToken openBracketToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax> patterns, Microsoft.CodeAnalysis.SyntaxToken closeBracketToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax? designation);
  - lang: fsharp
    values:
    - value: 'static member ListPattern : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax> * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax'
  - lang: vb
    values:
    - value: Public Shared Function ListPattern (openBracketToken As SyntaxToken, patterns As SeparatedSyntaxList(Of PatternSyntax), closeBracketToken As SyntaxToken, designation As VariableDesignationSyntax) As ListPatternSyntax
  monikers:
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new ListPatternSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax&text=ListPatternSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: patterns
    type: <xref href="Microsoft.CodeAnalysis.SeparatedSyntaxList`1?alt=Microsoft.CodeAnalysis.SeparatedSyntaxList&text=SeparatedSyntaxList" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax&text=PatternSyntax" data-throw-if-not-resolved="True"/>&gt;
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax})
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax})
  name: ListPattern(SeparatedSyntaxList<PatternSyntax>)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern(SeparatedSyntaxList<PatternSyntax>)
  nameWithType: SyntaxFactory.ListPattern(SeparatedSyntaxList<PatternSyntax>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax ListPattern (Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax> patterns = default);
  - lang: fsharp
    values:
    - value: 'static member ListPattern : Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax> -> Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax'
  - lang: vb
    values:
    - value: Public Shared Function ListPattern (Optional patterns As SeparatedSyntaxList(Of PatternSyntax) = Nothing) As ListPatternSyntax
  monikers:
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new ListPatternSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax&text=ListPatternSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: patterns
    type: <xref href="Microsoft.CodeAnalysis.SeparatedSyntaxList`1?alt=Microsoft.CodeAnalysis.SeparatedSyntaxList&text=SeparatedSyntaxList" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax&text=PatternSyntax" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: designation
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax&text=VariableDesignationSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)
  name: ListPattern(SeparatedSyntaxList<PatternSyntax>, VariableDesignationSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern(SeparatedSyntaxList<PatternSyntax>, VariableDesignationSyntax)
  nameWithType: SyntaxFactory.ListPattern(SeparatedSyntaxList<PatternSyntax>, VariableDesignationSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax ListPattern (Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax> patterns, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax? designation);
  - lang: fsharp
    values:
    - value: 'static member ListPattern : Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax> * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.ListPatternSyntax'
  - lang: vb
    values:
    - value: Public Shared Function ListPattern (patterns As SeparatedSyntaxList(Of PatternSyntax), designation As VariableDesignationSyntax) As ListPatternSyntax
  monikers:
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new ListPatternSyntax instance.
  metadata: {}
uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern*
commentId: Overload:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern
namespace: Microsoft.CodeAnalysis.CSharp
name: ListPattern
fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern
nameWithType: SyntaxFactory.ListPattern
assembliesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp.dll
packagesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp v4.1.0
  monikers:
  - roslyn-dotnet-4.1.0
- value: Microsoft.CodeAnalysis.CSharp v4.2.0
  monikers:
  - roslyn-dotnet-4.2.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- roslyn-dotnet-4.1.0
- roslyn-dotnet-4.2.0
metadata:
  api_name:
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern
  api_location:
  - Microsoft.CodeAnalysis.CSharp.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ListPattern
  - Microsoft::CodeAnalysis::CSharp::SyntaxFactory::ListPattern
  - ListPattern
  - SyntaxFactory.ListPattern
  - SyntaxFactory::ListPattern
  helpviewer_keywords:
  - SyntaxFactory.ListPattern method [.NET]
  - ListPattern method [.NET], class SyntaxFactory
  - SyntaxFactory.ListPattern(SyntaxToken, SeparatedSyntaxList<PatternSyntax>, SyntaxToken, VariableDesignationSyntax) method [.NET]
  - ListPattern(SyntaxToken, SeparatedSyntaxList<PatternSyntax>, SyntaxToken, VariableDesignationSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.ListPattern(SeparatedSyntaxList<PatternSyntax>) method [.NET]
  - ListPattern(SeparatedSyntaxList<PatternSyntax>) method [.NET], class SyntaxFactory
  - SyntaxFactory.ListPattern(SeparatedSyntaxList<PatternSyntax>, VariableDesignationSyntax) method [.NET]
  - ListPattern(SeparatedSyntaxList<PatternSyntax>, VariableDesignationSyntax) method [.NET], class SyntaxFactory
  monikers:
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
