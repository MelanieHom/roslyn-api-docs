### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax&text=PropertyStatementSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: identifier
    description: The name of the property being declared.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(Microsoft.CodeAnalysis.SyntaxToken)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(Microsoft.CodeAnalysis.SyntaxToken)
  name: PropertyStatement(SyntaxToken)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(SyntaxToken)
  nameWithType: SyntaxFactory.PropertyStatement(SyntaxToken)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ PropertyStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);
  - lang: fsharp
    values:
    - value: 'static member PropertyStatement : Microsoft.CodeAnalysis.SyntaxToken -> Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax'
  - lang: vb
    values:
    - value: Public Shared Function PropertyStatement (identifier As SyntaxToken) As PropertyStatementSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: >-
    Statement that declares a property. If this property has accessors declared,

    this statement will be the Begin of a BlockNode, and the accessors will be the

    Body of that node. Auto properties are property declarations without a

    PropertyBlock.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax&text=PropertyStatementSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: identifier
    description: The name of the property being declared.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(System.String)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(System.String)
  name: PropertyStatement(String)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(String)
  nameWithType: SyntaxFactory.PropertyStatement(String)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ PropertyStatement(System::String ^ identifier);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement (string identifier);
  - lang: fsharp
    values:
    - value: 'static member PropertyStatement : string -> Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax'
  - lang: vb
    values:
    - value: Public Shared Function PropertyStatement (identifier As String) As PropertyStatementSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: >-
    Statement that declares a property. If this property has accessors declared,

    this statement will be the Begin of a BlockNode, and the accessors will be the

    Body of that node. Auto properties are property declarations without a

    PropertyBlock.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax&text=PropertyStatementSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: attributeLists
    description: >-
      A list of all attribute lists on this declaration. If no attributes were

      specified, Nothing is returned.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxList`1?alt=Microsoft.CodeAnalysis.SyntaxList&text=SyntaxList" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&text=AttributeListSyntax" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: modifiers
    description: >-
      A list of all the modifier tokens that were present on this declaration. If no

      modifiers were specified, an empty list is returned. A bitfield version of all

      the modifiers ORed together, which is in many cases easier to use, can be

      obtained with the Modifiers property.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTokenList?alt=Microsoft.CodeAnalysis.SyntaxTokenList&text=SyntaxTokenList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: identifier
    description: The name of the property being declared.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: parameterList
    description: >-
      The method's parameter list including the parentheses. If no parameter list was

      present, Nothing is returned.
    type: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax&text=ParameterListSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: asClause
    description: >-
      The "As" clause that describes the return type. If no As clause was present,

      Nothing is returned.
    type: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax&text=AsClauseSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: initializer
    description: >-
      If present, an "= initial-value" clause describing the initial value of the

      property.
    type: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax&text=EqualsValueSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: implementsClause
    description: >-
      If present, an Implements clause indicated the interface methods that this

      method implements.
    type: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax&text=ImplementsClauseSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)
  name: PropertyStatement(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, ParameterListSyntax, AsClauseSyntax, EqualsValueSyntax, ImplementsClauseSyntax)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, ParameterListSyntax, AsClauseSyntax, EqualsValueSyntax, ImplementsClauseSyntax)
  nameWithType: SyntaxFactory.PropertyStatement(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, ParameterListSyntax, AsClauseSyntax, EqualsValueSyntax, ImplementsClauseSyntax)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ PropertyStatement(Microsoft::CodeAnalysis::SyntaxList<Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^> attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::AsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ initializer, Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ implementsClause);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement (Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause);
  - lang: fsharp
    values:
    - value: 'static member PropertyStatement : Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -> Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax'
  - lang: vb
    values:
    - value: Public Shared Function PropertyStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, initializer As EqualsValueSyntax, implementsClause As ImplementsClauseSyntax) As PropertyStatementSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: >-
    Statement that declares a property. If this property has accessors declared,

    this statement will be the Begin of a BlockNode, and the accessors will be the

    Body of that node. Auto properties are property declarations without a

    PropertyBlock.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax&text=PropertyStatementSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: attributeLists
    description: >-
      A list of all attribute lists on this declaration. If no attributes were

      specified, Nothing is returned.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxList`1?alt=Microsoft.CodeAnalysis.SyntaxList&text=SyntaxList" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&text=AttributeListSyntax" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: modifiers
    description: >-
      A list of all the modifier tokens that were present on this declaration. If no

      modifiers were specified, an empty list is returned. A bitfield version of all

      the modifiers ORed together, which is in many cases easier to use, can be

      obtained with the Modifiers property.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTokenList?alt=Microsoft.CodeAnalysis.SyntaxTokenList&text=SyntaxTokenList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: propertyKeyword
    description: The "Property" keyword that introduces this property declaration.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: identifier
    description: The name of the property being declared.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: parameterList
    description: >-
      The method's parameter list including the parentheses. If no parameter list was

      present, Nothing is returned.
    type: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax&text=ParameterListSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: asClause
    description: >-
      The "As" clause that describes the return type. If no As clause was present,

      Nothing is returned.
    type: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax&text=AsClauseSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: initializer
    description: >-
      If present, an "= initial-value" clause describing the initial value of the

      property.
    type: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax&text=EqualsValueSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: implementsClause
    description: >-
      If present, an Implements clause indicated the interface methods that this

      method implements.
    type: <xref href="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax?alt=Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax&text=ImplementsClauseSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)
  name: PropertyStatement(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, ParameterListSyntax, AsClauseSyntax, EqualsValueSyntax, ImplementsClauseSyntax)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, ParameterListSyntax, AsClauseSyntax, EqualsValueSyntax, ImplementsClauseSyntax)
  nameWithType: SyntaxFactory.PropertyStatement(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, ParameterListSyntax, AsClauseSyntax, EqualsValueSyntax, ImplementsClauseSyntax)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ PropertyStatement(Microsoft::CodeAnalysis::SyntaxList<Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^> attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken propertyKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::AsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ initializer, Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ implementsClause);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement (Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken propertyKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause);
  - lang: fsharp
    values:
    - value: 'static member PropertyStatement : Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -> Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax'
  - lang: vb
    values:
    - value: Public Shared Function PropertyStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, propertyKeyword As SyntaxToken, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, initializer As EqualsValueSyntax, implementsClause As ImplementsClauseSyntax) As PropertyStatementSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: >-
    Statement that declares a property. If this property has accessors declared,

    this statement will be the Begin of a BlockNode, and the accessors will be the

    Body of that node. Auto properties are property declarations without a

    PropertyBlock.
  metadata: {}
uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement*
commentId: Overload:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement
namespace: Microsoft.CodeAnalysis.VisualBasic
name: PropertyStatement
fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement
nameWithType: SyntaxFactory.PropertyStatement
assembliesWithMoniker:
- value: Microsoft.CodeAnalysis.VisualBasic.dll
packagesWithMoniker:
- value: Microsoft.CodeAnalysis.VisualBasic v3.0.0
  monikers:
  - roslyn-dotnet-3.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.1.0
  monikers:
  - roslyn-dotnet-3.1
- value: Microsoft.CodeAnalysis.VisualBasic v3.10.0
  monikers:
  - roslyn-dotnet-3.10.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.11.0
  monikers:
  - roslyn-dotnet-3.11.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.2.0
  monikers:
  - roslyn-dotnet-3.2
- value: Microsoft.CodeAnalysis.VisualBasic v3.2.1
  monikers:
  - roslyn-dotnet-3.2.1
- value: Microsoft.CodeAnalysis.VisualBasic v3.3.1
  monikers:
  - roslyn-dotnet-3.3.1
- value: Microsoft.CodeAnalysis.VisualBasic v3.4.0
  monikers:
  - roslyn-dotnet-3.4.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.5.0
  monikers:
  - roslyn-dotnet-3.5.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.6.0
  monikers:
  - roslyn-dotnet-3.6.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.7.0
  monikers:
  - roslyn-dotnet-3.7.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.8.0
  monikers:
  - roslyn-dotnet-3.8.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.9.0
  monikers:
  - roslyn-dotnet-3.9.0
- value: Microsoft.CodeAnalysis.VisualBasic v4.0.1
  monikers:
  - roslyn-dotnet-4.0.1
- value: Microsoft.CodeAnalysis.VisualBasic v4.1.0
  monikers:
  - roslyn-dotnet-4.1.0
- value: Microsoft.CodeAnalysis.VisualBasic v4.2.0
  monikers:
  - roslyn-dotnet-4.2.0
devLangs:
- cpp
- csharp
- vb
- fsharp
monikers:
- roslyn-dotnet
- roslyn-dotnet-3.0
- roslyn-dotnet-3.1
- roslyn-dotnet-3.10.0
- roslyn-dotnet-3.11.0
- roslyn-dotnet-3.2
- roslyn-dotnet-3.2.1
- roslyn-dotnet-3.3.1
- roslyn-dotnet-3.4.0
- roslyn-dotnet-3.5.0
- roslyn-dotnet-3.6.0
- roslyn-dotnet-3.7.0
- roslyn-dotnet-3.8.0
- roslyn-dotnet-3.9.0
- roslyn-dotnet-4.0.1
- roslyn-dotnet-4.1.0
- roslyn-dotnet-4.2.0
metadata:
  api_name:
  - Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement
  api_location:
  - Microsoft.CodeAnalysis.VisualBasic.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement
  - Microsoft::CodeAnalysis::VisualBasic::SyntaxFactory::PropertyStatement
  - PropertyStatement
  - SyntaxFactory.PropertyStatement
  - SyntaxFactory::PropertyStatement
  helpviewer_keywords:
  - SyntaxFactory.PropertyStatement method [.NET]
  - PropertyStatement method [.NET], class SyntaxFactory
  - SyntaxFactory.PropertyStatement(SyntaxToken) method [.NET]
  - PropertyStatement(SyntaxToken) method [.NET], class SyntaxFactory
  - SyntaxFactory.PropertyStatement(String) method [.NET]
  - PropertyStatement(String) method [.NET], class SyntaxFactory
  - SyntaxFactory.PropertyStatement(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, ParameterListSyntax, AsClauseSyntax, EqualsValueSyntax, ImplementsClauseSyntax) method [.NET]
  - PropertyStatement(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, ParameterListSyntax, AsClauseSyntax, EqualsValueSyntax, ImplementsClauseSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.PropertyStatement(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, ParameterListSyntax, AsClauseSyntax, EqualsValueSyntax, ImplementsClauseSyntax) method [.NET]
  - PropertyStatement(SyntaxList<AttributeListSyntax>, SyntaxTokenList, SyntaxToken, SyntaxToken, ParameterListSyntax, AsClauseSyntax, EqualsValueSyntax, ImplementsClauseSyntax) method [.NET], class SyntaxFactory
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
