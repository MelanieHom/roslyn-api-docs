### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 4-byte unsigned integer value to be represented by the returned token.
    type: <xref href="System.UInt32?alt=System.UInt32&text=UInt32" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.UInt32)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.UInt32)
  name: Literal(String, UInt32)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(String, UInt32)
  nameWithType: SyntaxFactory.Literal(String, UInt32)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, System::UInt32 value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, uint value);
  - lang: fsharp
    values:
    - value: 'static member Literal : string * uint32 -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (text As String, value As UInteger) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind IntegerLiteralToken from the text and corresponding 4-byte unsigned integer value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 8-byte unsigned integer value to be represented by the returned token.
    type: <xref href="System.UInt64?alt=System.UInt64&text=UInt64" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.UInt64)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.UInt64)
  name: Literal(String, UInt64)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(String, UInt64)
  nameWithType: SyntaxFactory.Literal(String, UInt64)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, System::UInt64 value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, ulong value);
  - lang: fsharp
    values:
    - value: 'static member Literal : string * uint64 -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (text As String, value As ULong) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind IntegerLiteralToken from the text and corresponding 8-byte unsigned integer value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: leading
    description: A list of trivia immediately preceding the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal, including quotes and escape sequences.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The character value to be represented by the returned token.
    type: <xref href="System.Char?alt=System.Char&text=Char" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: trailing
    description: A list of trivia immediately following the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)
  name: Literal(SyntaxTriviaList, String, Char, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(SyntaxTriviaList, String, Char, SyntaxTriviaList)
  nameWithType: SyntaxFactory.Literal(SyntaxTriviaList, String, Char, SyntaxTriviaList)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, char value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, char value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);
  - lang: fsharp
    values:
    - value: 'static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * char * Microsoft.CodeAnalysis.SyntaxTriviaList -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Char, trailing As SyntaxTriviaList) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind CharacterLiteralToken from the text and corresponding character value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: leading
    description: A list of trivia immediately preceding the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The decimal value to be represented by the returned token.
    type: <xref href="System.Decimal?alt=System.Decimal&text=Decimal" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: trailing
    description: A list of trivia immediately following the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)
  name: Literal(SyntaxTriviaList, String, Decimal, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(SyntaxTriviaList, String, Decimal, SyntaxTriviaList)
  nameWithType: SyntaxFactory.Literal(SyntaxTriviaList, String, Decimal, SyntaxTriviaList)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, System::Decimal value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, decimal value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);
  - lang: fsharp
    values:
    - value: 'static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * decimal * Microsoft.CodeAnalysis.SyntaxTriviaList -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Decimal, trailing As SyntaxTriviaList) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind DecimalLiteralToken from the text and corresponding decimal value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: leading
    description: A list of trivia immediately preceding the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 8-byte floating point value to be represented by the returned token.
    type: <xref href="System.Double?alt=System.Double&text=Double" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: trailing
    description: A list of trivia immediately following the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)
  name: Literal(SyntaxTriviaList, String, Double, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(SyntaxTriviaList, String, Double, SyntaxTriviaList)
  nameWithType: SyntaxFactory.Literal(SyntaxTriviaList, String, Double, SyntaxTriviaList)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, double value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, double value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);
  - lang: fsharp
    values:
    - value: 'static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * double * Microsoft.CodeAnalysis.SyntaxTriviaList -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Double, trailing As SyntaxTriviaList) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind FloatingLiteralToken from the text and corresponding 8-byte floating point value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal, including quotes and escape sequences.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The string value to be represented by the returned token.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.String)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.String)
  name: Literal(String, String)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(String, String)
  nameWithType: SyntaxFactory.Literal(String, String)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, System::String ^ value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, string value);
  - lang: fsharp
    values:
    - value: 'static member Literal : string * string -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (text As String, value As String) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind StringLiteralToken from the text and corresponding string value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: leading
    description: A list of trivia immediately preceding the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 8-byte signed integer value to be represented by the returned token.
    type: <xref href="System.Int64?alt=System.Int64&text=Int64" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: trailing
    description: A list of trivia immediately following the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  name: Literal(SyntaxTriviaList, String, Int64, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(SyntaxTriviaList, String, Int64, SyntaxTriviaList)
  nameWithType: SyntaxFactory.Literal(SyntaxTriviaList, String, Int64, SyntaxTriviaList)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, long value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, long value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);
  - lang: fsharp
    values:
    - value: 'static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * int64 * Microsoft.CodeAnalysis.SyntaxTriviaList -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Long, trailing As SyntaxTriviaList) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind IntegerLiteralToken from the text and corresponding 8-byte signed integer value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: leading
    description: A list of trivia immediately preceding the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 4-byte floating point value to be represented by the returned token.
    type: <xref href="System.Single?alt=System.Single&text=Single" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: trailing
    description: A list of trivia immediately following the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Single,Microsoft.CodeAnalysis.SyntaxTriviaList)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Single,Microsoft.CodeAnalysis.SyntaxTriviaList)
  name: Literal(SyntaxTriviaList, String, Single, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(SyntaxTriviaList, String, Single, SyntaxTriviaList)
  nameWithType: SyntaxFactory.Literal(SyntaxTriviaList, String, Single, SyntaxTriviaList)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, float value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, float value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);
  - lang: fsharp
    values:
    - value: 'static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * single * Microsoft.CodeAnalysis.SyntaxTriviaList -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Single, trailing As SyntaxTriviaList) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind FloatingLiteralToken from the text and corresponding 4-byte floating point value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: leading
    description: A list of trivia immediately preceding the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal, including quotes and escape sequences.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The string value to be represented by the returned token.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: trailing
    description: A list of trivia immediately following the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)
  name: Literal(SyntaxTriviaList, String, String, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(SyntaxTriviaList, String, String, SyntaxTriviaList)
  nameWithType: SyntaxFactory.Literal(SyntaxTriviaList, String, String, SyntaxTriviaList)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, System::String ^ value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);
  - lang: fsharp
    values:
    - value: 'static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As String, trailing As SyntaxTriviaList) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind StringLiteralToken from the text and corresponding string value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: leading
    description: A list of trivia immediately preceding the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 4-byte unsigned integer value to be represented by the returned token.
    type: <xref href="System.UInt32?alt=System.UInt32&text=UInt32" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: trailing
    description: A list of trivia immediately following the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  name: Literal(SyntaxTriviaList, String, UInt32, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(SyntaxTriviaList, String, UInt32, SyntaxTriviaList)
  nameWithType: SyntaxFactory.Literal(SyntaxTriviaList, String, UInt32, SyntaxTriviaList)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, System::UInt32 value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, uint value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);
  - lang: fsharp
    values:
    - value: 'static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * uint32 * Microsoft.CodeAnalysis.SyntaxTriviaList -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As UInteger, trailing As SyntaxTriviaList) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind IntegerLiteralToken from the text and corresponding 4-byte unsigned integer value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: leading
    description: A list of trivia immediately preceding the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 8-byte unsigned integer value to be represented by the returned token.
    type: <xref href="System.UInt64?alt=System.UInt64&text=UInt64" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: trailing
    description: A list of trivia immediately following the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)
  name: Literal(SyntaxTriviaList, String, UInt64, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(SyntaxTriviaList, String, UInt64, SyntaxTriviaList)
  nameWithType: SyntaxFactory.Literal(SyntaxTriviaList, String, UInt64, SyntaxTriviaList)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, System::UInt64 value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, ulong value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);
  - lang: fsharp
    values:
    - value: 'static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * uint64 * Microsoft.CodeAnalysis.SyntaxTriviaList -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As ULong, trailing As SyntaxTriviaList) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind IntegerLiteralToken from the text and corresponding 8-byte unsigned integer value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: leading
    description: A list of trivia immediately preceding the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 4-byte signed integer value to be represented by the returned token.
    type: <xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: trailing
    description: A list of trivia immediately following the token.
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int32,Microsoft.CodeAnalysis.SyntaxTriviaList)
  name: Literal(SyntaxTriviaList, String, Int32, SyntaxTriviaList)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(SyntaxTriviaList, String, Int32, SyntaxTriviaList)
  nameWithType: SyntaxFactory.Literal(SyntaxTriviaList, String, Int32, SyntaxTriviaList)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, int value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, int value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);
  - lang: fsharp
    values:
    - value: 'static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * int * Microsoft.CodeAnalysis.SyntaxTriviaList -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Integer, trailing As SyntaxTriviaList) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind IntegerLiteralToken from the text and corresponding 4-byte signed integer value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 4-byte floating point value to be represented by the returned token.
    type: <xref href="System.Single?alt=System.Single&text=Single" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Single)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Single)
  name: Literal(String, Single)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(String, Single)
  nameWithType: SyntaxFactory.Literal(String, Single)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, float value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, float value);
  - lang: fsharp
    values:
    - value: 'static member Literal : string * single -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (text As String, value As Single) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind FloatingLiteralToken from the text and corresponding 4-byte floating point value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: value
    description: The string value to be represented by the returned token.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String)
  name: Literal(String)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(String)
  nameWithType: SyntaxFactory.Literal(String)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (string value);
  - lang: fsharp
    values:
    - value: 'static member Literal : string -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (value As String) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind StringLiteralToken from a string value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 4-byte signed integer value to be represented by the returned token.
    type: <xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Int32)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Int32)
  name: Literal(String, Int32)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(String, Int32)
  nameWithType: SyntaxFactory.Literal(String, Int32)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, int value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, int value);
  - lang: fsharp
    values:
    - value: 'static member Literal : string * int -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (text As String, value As Integer) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind IntegerLiteralToken from the text and corresponding 4-byte signed integer value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: value
    description: The character value to be represented by the returned token.
    type: <xref href="System.Char?alt=System.Char&text=Char" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Char)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Char)
  name: Literal(Char)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Char)
  nameWithType: SyntaxFactory.Literal(Char)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(char value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (char value);
  - lang: fsharp
    values:
    - value: 'static member Literal : char -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (value As Char) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind CharacterLiteralToken from a character value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: value
    description: The decimal value to be represented by the returned token.
    type: <xref href="System.Decimal?alt=System.Decimal&text=Decimal" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Decimal)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Decimal)
  name: Literal(Decimal)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Decimal)
  nameWithType: SyntaxFactory.Literal(Decimal)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::Decimal value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (decimal value);
  - lang: fsharp
    values:
    - value: 'static member Literal : decimal -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (value As Decimal) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind DecimalLiteralToken from a decimal value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: value
    description: The 8-byte floating point value to be represented by the returned token.
    type: <xref href="System.Double?alt=System.Double&text=Double" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Double)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Double)
  name: Literal(Double)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Double)
  nameWithType: SyntaxFactory.Literal(Double)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(double value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (double value);
  - lang: fsharp
    values:
    - value: 'static member Literal : double -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (value As Double) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind FloatingLiteralToken from an 8-byte floating point value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: value
    description: The 4-byte signed integer value to be represented by the returned token.
    type: <xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Int32)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Int32)
  name: Literal(Int32)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Int32)
  nameWithType: SyntaxFactory.Literal(Int32)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(int value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (int value);
  - lang: fsharp
    values:
    - value: 'static member Literal : int -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (value As Integer) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind IntegerLiteralToken from a 4-byte signed integer value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: value
    description: The 8-byte signed integer value to be represented by the returned token.
    type: <xref href="System.Int64?alt=System.Int64&text=Int64" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Int64)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Int64)
  name: Literal(Int64)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Int64)
  nameWithType: SyntaxFactory.Literal(Int64)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(long value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (long value);
  - lang: fsharp
    values:
    - value: 'static member Literal : int64 -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (value As Long) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind IntegerLiteralToken from an 8-byte signed integer value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: value
    description: The 4-byte floating point value to be represented by the returned token.
    type: <xref href="System.Single?alt=System.Single&text=Single" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Single)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Single)
  name: Literal(Single)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Single)
  nameWithType: SyntaxFactory.Literal(Single)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(float value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (float value);
  - lang: fsharp
    values:
    - value: 'static member Literal : single -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (value As Single) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind FloatingLiteralToken from a 4-byte floating point value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 8-byte signed integer value to be represented by the returned token.
    type: <xref href="System.Int64?alt=System.Int64&text=Int64" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Int64)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Int64)
  name: Literal(String, Int64)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(String, Int64)
  nameWithType: SyntaxFactory.Literal(String, Int64)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, long value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, long value);
  - lang: fsharp
    values:
    - value: 'static member Literal : string * int64 -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (text As String, value As Long) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind IntegerLiteralToken from the text and corresponding 8-byte signed integer value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: value
    description: The 4-byte unsigned integer value to be represented by the returned token.
    type: <xref href="System.UInt32?alt=System.UInt32&text=UInt32" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.UInt32)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.UInt32)
  name: Literal(UInt32)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(UInt32)
  nameWithType: SyntaxFactory.Literal(UInt32)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::UInt32 value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (uint value);
  - lang: fsharp
    values:
    - value: 'static member Literal : uint32 -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (value As UInteger) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: >-
    Creates a token with kind IntegerLiteralToken from a 4-byte unsigned integer

    value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: value
    description: The 8-byte unsigned integer value to be represented by the returned token.
    type: <xref href="System.UInt64?alt=System.UInt64&text=UInt64" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.UInt64)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.UInt64)
  name: Literal(UInt64)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(UInt64)
  nameWithType: SyntaxFactory.Literal(UInt64)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::UInt64 value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (ulong value);
  - lang: fsharp
    values:
    - value: 'static member Literal : uint64 -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (value As ULong) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind IntegerLiteralToken from an 8-byte unsigned integer value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal, including quotes and escape sequences.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The character value to be represented by the returned token.
    type: <xref href="System.Char?alt=System.Char&text=Char" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Char)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Char)
  name: Literal(String, Char)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(String, Char)
  nameWithType: SyntaxFactory.Literal(String, Char)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, char value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, char value);
  - lang: fsharp
    values:
    - value: 'static member Literal : string * char -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (text As String, value As Char) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind CharacterLiteralToken from the text and corresponding character value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The decimal value to be represented by the returned token.
    type: <xref href="System.Decimal?alt=System.Decimal&text=Decimal" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Decimal)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Decimal)
  name: Literal(String, Decimal)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(String, Decimal)
  nameWithType: SyntaxFactory.Literal(String, Decimal)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, System::Decimal value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, decimal value);
  - lang: fsharp
    values:
    - value: 'static member Literal : string * decimal -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (text As String, value As Decimal) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind DecimalLiteralToken from the text and corresponding decimal value.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: text
    description: The raw text of the literal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: value
    description: The 8-byte floating point value to be represented by the returned token.
    type: <xref href="System.Double?alt=System.Double&text=Double" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Double)
  commentId: M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Double)
  name: Literal(String, Double)
  fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(String, Double)
  nameWithType: SyntaxFactory.Literal(String, Double)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, double value);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, double value);
  - lang: fsharp
    values:
    - value: 'static member Literal : string * double -> Microsoft.CodeAnalysis.SyntaxToken'
  - lang: vb
    values:
    - value: Public Shared Function Literal (text As String, value As Double) As SyntaxToken
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a token with kind FloatingLiteralToken from the text and corresponding 8-byte floating point value.
  metadata: {}
uid: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal*
commentId: Overload:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal
namespace: Microsoft.CodeAnalysis.VisualBasic
name: Literal
fullName: Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal
nameWithType: SyntaxFactory.Literal
assembliesWithMoniker:
- value: Microsoft.CodeAnalysis.VisualBasic.dll
packagesWithMoniker:
- value: Microsoft.CodeAnalysis.VisualBasic v3.0.0
  monikers:
  - roslyn-dotnet-3.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.1.0
  monikers:
  - roslyn-dotnet-3.1
- value: Microsoft.CodeAnalysis.VisualBasic v3.10.0
  monikers:
  - roslyn-dotnet-3.10.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.11.0
  monikers:
  - roslyn-dotnet-3.11.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.2.0
  monikers:
  - roslyn-dotnet-3.2
- value: Microsoft.CodeAnalysis.VisualBasic v3.2.1
  monikers:
  - roslyn-dotnet-3.2.1
- value: Microsoft.CodeAnalysis.VisualBasic v3.3.1
  monikers:
  - roslyn-dotnet-3.3.1
- value: Microsoft.CodeAnalysis.VisualBasic v3.4.0
  monikers:
  - roslyn-dotnet-3.4.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.5.0
  monikers:
  - roslyn-dotnet-3.5.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.6.0
  monikers:
  - roslyn-dotnet-3.6.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.7.0
  monikers:
  - roslyn-dotnet-3.7.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.8.0
  monikers:
  - roslyn-dotnet-3.8.0
- value: Microsoft.CodeAnalysis.VisualBasic v3.9.0
  monikers:
  - roslyn-dotnet-3.9.0
- value: Microsoft.CodeAnalysis.VisualBasic v4.0.1
  monikers:
  - roslyn-dotnet-4.0.1
- value: Microsoft.CodeAnalysis.VisualBasic v4.1.0
  monikers:
  - roslyn-dotnet-4.1.0
- value: Microsoft.CodeAnalysis.VisualBasic v4.2.0
  monikers:
  - roslyn-dotnet-4.2.0
devLangs:
- cpp
- csharp
- vb
- fsharp
monikers:
- roslyn-dotnet
- roslyn-dotnet-3.0
- roslyn-dotnet-3.1
- roslyn-dotnet-3.10.0
- roslyn-dotnet-3.11.0
- roslyn-dotnet-3.2
- roslyn-dotnet-3.2.1
- roslyn-dotnet-3.3.1
- roslyn-dotnet-3.4.0
- roslyn-dotnet-3.5.0
- roslyn-dotnet-3.6.0
- roslyn-dotnet-3.7.0
- roslyn-dotnet-3.8.0
- roslyn-dotnet-3.9.0
- roslyn-dotnet-4.0.1
- roslyn-dotnet-4.1.0
- roslyn-dotnet-4.2.0
metadata:
  api_name:
  - Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal
  api_location:
  - Microsoft.CodeAnalysis.VisualBasic.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal
  - Microsoft::CodeAnalysis::VisualBasic::SyntaxFactory::Literal
  - Literal
  - SyntaxFactory.Literal
  - SyntaxFactory::Literal
  helpviewer_keywords:
  - SyntaxFactory.Literal method [.NET]
  - Literal method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(String, UInt32) method [.NET]
  - Literal(String, UInt32) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(String, UInt64) method [.NET]
  - Literal(String, UInt64) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(SyntaxTriviaList, String, Char, SyntaxTriviaList) method [.NET]
  - Literal(SyntaxTriviaList, String, Char, SyntaxTriviaList) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(SyntaxTriviaList, String, Decimal, SyntaxTriviaList) method [.NET]
  - Literal(SyntaxTriviaList, String, Decimal, SyntaxTriviaList) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(SyntaxTriviaList, String, Double, SyntaxTriviaList) method [.NET]
  - Literal(SyntaxTriviaList, String, Double, SyntaxTriviaList) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(String, String) method [.NET]
  - Literal(String, String) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(SyntaxTriviaList, String, Int64, SyntaxTriviaList) method [.NET]
  - Literal(SyntaxTriviaList, String, Int64, SyntaxTriviaList) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(SyntaxTriviaList, String, Single, SyntaxTriviaList) method [.NET]
  - Literal(SyntaxTriviaList, String, Single, SyntaxTriviaList) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(SyntaxTriviaList, String, String, SyntaxTriviaList) method [.NET]
  - Literal(SyntaxTriviaList, String, String, SyntaxTriviaList) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(SyntaxTriviaList, String, UInt32, SyntaxTriviaList) method [.NET]
  - Literal(SyntaxTriviaList, String, UInt32, SyntaxTriviaList) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(SyntaxTriviaList, String, UInt64, SyntaxTriviaList) method [.NET]
  - Literal(SyntaxTriviaList, String, UInt64, SyntaxTriviaList) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(SyntaxTriviaList, String, Int32, SyntaxTriviaList) method [.NET]
  - Literal(SyntaxTriviaList, String, Int32, SyntaxTriviaList) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(String, Single) method [.NET]
  - Literal(String, Single) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(String) method [.NET]
  - Literal(String) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(String, Int32) method [.NET]
  - Literal(String, Int32) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(Char) method [.NET]
  - Literal(Char) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(Decimal) method [.NET]
  - Literal(Decimal) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(Double) method [.NET]
  - Literal(Double) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(Int32) method [.NET]
  - Literal(Int32) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(Int64) method [.NET]
  - Literal(Int64) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(Single) method [.NET]
  - Literal(Single) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(String, Int64) method [.NET]
  - Literal(String, Int64) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(UInt32) method [.NET]
  - Literal(UInt32) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(UInt64) method [.NET]
  - Literal(UInt64) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(String, Char) method [.NET]
  - Literal(String, Char) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(String, Decimal) method [.NET]
  - Literal(String, Decimal) method [.NET], class SyntaxFactory
  - SyntaxFactory.Literal(String, Double) method [.NET]
  - Literal(String, Double) method [.NET], class SyntaxFactory
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
