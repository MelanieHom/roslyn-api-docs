### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SymbolInfo?alt=Microsoft.CodeAnalysis.SymbolInfo&text=SymbolInfo" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: semanticModel
    type: <xref href="Microsoft.CodeAnalysis.SemanticModel?alt=Microsoft.CodeAnalysis.SemanticModel&text=SemanticModel" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: position
    type: <xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expression
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: bindingOption
    type: <xref href="Microsoft.CodeAnalysis.SpeculativeBindingOption?alt=Microsoft.CodeAnalysis.SpeculativeBindingOption&text=SpeculativeBindingOption" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)
  commentId: M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)
  name: GetSpeculativeSymbolInfo(SemanticModel, Int32, ExpressionSyntax, SpeculativeBindingOption)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, ExpressionSyntax, SpeculativeBindingOption)
  nameWithType: CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, ExpressionSyntax, SpeculativeBindingOption)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:

        [System::Runtime::CompilerServices::Extension]
         static Microsoft::CodeAnalysis::SymbolInfo GetSpeculativeSymbolInfo(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SpeculativeBindingOption bindingOption);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption);
      monikers:
      - roslyn-dotnet-3.0
      - roslyn-dotnet-3.1
      - roslyn-dotnet-3.2
      - roslyn-dotnet-3.2.1
      - roslyn-dotnet-3.3.1
      - roslyn-dotnet-3.4.0
    - value: public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel? semanticModel, int position, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption);
      monikers:
      - roslyn-dotnet-3.10.0
      - roslyn-dotnet-3.11.0
      - roslyn-dotnet-3.5.0
      - roslyn-dotnet-3.6.0
      - roslyn-dotnet-3.7.0
      - roslyn-dotnet-3.8.0
      - roslyn-dotnet-3.9.0
      - roslyn-dotnet-4.0.1
      - roslyn-dotnet-4.1.0
      - roslyn-dotnet-4.2.0
  - lang: fsharp
    values:
    - value: 'static member GetSpeculativeSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SpeculativeBindingOption -> Microsoft.CodeAnalysis.SymbolInfo'
  - lang: vb
    values:
    - value: >-
        <Extension()>

        Public Function GetSpeculativeSymbolInfo (semanticModel As SemanticModel, position As Integer, expression As ExpressionSyntax, bindingOption As SpeculativeBindingOption) As SymbolInfo
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: >-
    Binds the expression in the context of the specified location and gets symbol information.

    This method is used to get symbol information about an expression that did not actually

    appear in the source code.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SymbolInfo?alt=Microsoft.CodeAnalysis.SymbolInfo&text=SymbolInfo" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: semanticModel
    type: <xref href="Microsoft.CodeAnalysis.SemanticModel?alt=Microsoft.CodeAnalysis.SemanticModel&text=SemanticModel" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: position
    type: <xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expression
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax&text=CrefSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: bindingOption
    type: <xref href="Microsoft.CodeAnalysis.SpeculativeBindingOption?alt=Microsoft.CodeAnalysis.SpeculativeBindingOption&text=SpeculativeBindingOption" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)
  commentId: M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)
  name: GetSpeculativeSymbolInfo(SemanticModel, Int32, CrefSyntax, SpeculativeBindingOption)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, CrefSyntax, SpeculativeBindingOption)
  nameWithType: CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, CrefSyntax, SpeculativeBindingOption)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:

        [System::Runtime::CompilerServices::Extension]
         static Microsoft::CodeAnalysis::SymbolInfo GetSpeculativeSymbolInfo(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::CSharp::Syntax::CrefSyntax ^ expression, Microsoft::CodeAnalysis::SpeculativeBindingOption bindingOption);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption);
      monikers:
      - roslyn-dotnet-3.0
      - roslyn-dotnet-3.1
      - roslyn-dotnet-3.2
      - roslyn-dotnet-3.2.1
      - roslyn-dotnet-3.3.1
      - roslyn-dotnet-3.4.0
    - value: public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel? semanticModel, int position, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption);
      monikers:
      - roslyn-dotnet-3.10.0
      - roslyn-dotnet-3.11.0
      - roslyn-dotnet-3.5.0
      - roslyn-dotnet-3.6.0
      - roslyn-dotnet-3.7.0
      - roslyn-dotnet-3.8.0
      - roslyn-dotnet-3.9.0
      - roslyn-dotnet-4.0.1
      - roslyn-dotnet-4.1.0
      - roslyn-dotnet-4.2.0
  - lang: fsharp
    values:
    - value: 'static member GetSpeculativeSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax * Microsoft.CodeAnalysis.SpeculativeBindingOption -> Microsoft.CodeAnalysis.SymbolInfo'
  - lang: vb
    values:
    - value: >-
        <Extension()>

        Public Function GetSpeculativeSymbolInfo (semanticModel As SemanticModel, position As Integer, expression As CrefSyntax, bindingOption As SpeculativeBindingOption) As SymbolInfo
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: >-
    Binds the CrefSyntax expression in the context of the specified location and gets symbol information.

    This method is used to get symbol information about an expression that did not actually

    appear in the source code.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SymbolInfo?alt=Microsoft.CodeAnalysis.SymbolInfo&text=SymbolInfo" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: semanticModel
    type: <xref href="Microsoft.CodeAnalysis.SemanticModel?alt=Microsoft.CodeAnalysis.SemanticModel&text=SemanticModel" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: position
    type: <xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: constructorInitializer
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax&text=PrimaryConstructorBaseTypeSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax)
  name: GetSpeculativeSymbolInfo(SemanticModel, Int32, PrimaryConstructorBaseTypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, PrimaryConstructorBaseTypeSyntax)
  nameWithType: CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, PrimaryConstructorBaseTypeSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel? semanticModel, int position, Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax constructorInitializer);
  - lang: fsharp
    values:
    - value: 'static member GetSpeculativeSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax -> Microsoft.CodeAnalysis.SymbolInfo'
  - lang: vb
    values:
    - value: >-
        <Extension()>

        Public Function GetSpeculativeSymbolInfo (semanticModel As SemanticModel, position As Integer, constructorInitializer As PrimaryConstructorBaseTypeSyntax) As SymbolInfo
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: >-
    Bind the constructor initializer in the context of the specified location and get semantic information

    about symbols. This method is used to get semantic information about a constructor

    initializer that did not actually appear in the source code.


    NOTE: This will only work in locations where there is already a constructor initializer.

    <xref data-throw-if-not-resolved="true" uid="Microsoft.CodeAnalysis.CSharp.Syntax.PrimaryConstructorBaseTypeSyntax"></xref>.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SymbolInfo?alt=Microsoft.CodeAnalysis.SymbolInfo&text=SymbolInfo" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: semanticModel
    type: <xref href="Microsoft.CodeAnalysis.SemanticModel?alt=Microsoft.CodeAnalysis.SemanticModel&text=SemanticModel" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: position
    type: <xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: constructorInitializer
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax&text=ConstructorInitializerSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax)
  name: GetSpeculativeSymbolInfo(SemanticModel, Int32, ConstructorInitializerSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, ConstructorInitializerSyntax)
  nameWithType: CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, ConstructorInitializerSyntax)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:

        [System::Runtime::CompilerServices::Extension]
         static Microsoft::CodeAnalysis::SymbolInfo GetSpeculativeSymbolInfo(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::CSharp::Syntax::ConstructorInitializerSyntax ^ constructorInitializer);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax constructorInitializer);
      monikers:
      - roslyn-dotnet-3.0
      - roslyn-dotnet-3.1
      - roslyn-dotnet-3.2
      - roslyn-dotnet-3.2.1
      - roslyn-dotnet-3.3.1
      - roslyn-dotnet-3.4.0
    - value: public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel? semanticModel, int position, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax constructorInitializer);
      monikers:
      - roslyn-dotnet-3.10.0
      - roslyn-dotnet-3.11.0
      - roslyn-dotnet-3.5.0
      - roslyn-dotnet-3.6.0
      - roslyn-dotnet-3.7.0
      - roslyn-dotnet-3.8.0
      - roslyn-dotnet-3.9.0
      - roslyn-dotnet-4.0.1
      - roslyn-dotnet-4.1.0
      - roslyn-dotnet-4.2.0
  - lang: fsharp
    values:
    - value: 'static member GetSpeculativeSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax -> Microsoft.CodeAnalysis.SymbolInfo'
  - lang: vb
    values:
    - value: >-
        <Extension()>

        Public Function GetSpeculativeSymbolInfo (semanticModel As SemanticModel, position As Integer, constructorInitializer As ConstructorInitializerSyntax) As SymbolInfo
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: >-
    Bind the constructor initializer in the context of the specified location and get semantic information

    such as type, symbols and diagnostics. This method is used to get semantic information about a constructor

    initializer that did not actually appear in the source code.


    NOTE: This will only work in locations where there is already a constructor initializer.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.SymbolInfo?alt=Microsoft.CodeAnalysis.SymbolInfo&text=SymbolInfo" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: semanticModel
    type: <xref href="Microsoft.CodeAnalysis.SemanticModel?alt=Microsoft.CodeAnalysis.SemanticModel&text=SemanticModel" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: position
    type: <xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: attribute
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&text=AttributeSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax)
  name: GetSpeculativeSymbolInfo(SemanticModel, Int32, AttributeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, AttributeSyntax)
  nameWithType: CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, AttributeSyntax)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:

        [System::Runtime::CompilerServices::Extension]
         static Microsoft::CodeAnalysis::SymbolInfo GetSpeculativeSymbolInfo(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::CSharp::Syntax::AttributeSyntax ^ attribute);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax attribute);
      monikers:
      - roslyn-dotnet-3.0
      - roslyn-dotnet-3.1
      - roslyn-dotnet-3.2
      - roslyn-dotnet-3.2.1
      - roslyn-dotnet-3.3.1
      - roslyn-dotnet-3.4.0
    - value: public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel? semanticModel, int position, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax attribute);
      monikers:
      - roslyn-dotnet-3.10.0
      - roslyn-dotnet-3.11.0
      - roslyn-dotnet-3.5.0
      - roslyn-dotnet-3.6.0
      - roslyn-dotnet-3.7.0
      - roslyn-dotnet-3.8.0
      - roslyn-dotnet-3.9.0
      - roslyn-dotnet-4.0.1
      - roslyn-dotnet-4.1.0
      - roslyn-dotnet-4.2.0
  - lang: fsharp
    values:
    - value: 'static member GetSpeculativeSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax -> Microsoft.CodeAnalysis.SymbolInfo'
  - lang: vb
    values:
    - value: >-
        <Extension()>

        Public Function GetSpeculativeSymbolInfo (semanticModel As SemanticModel, position As Integer, attribute As AttributeSyntax) As SymbolInfo
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: >-
    Bind the attribute in the context of the specified location and get semantic information

    such as type, symbols and diagnostics. This method is used to get semantic information about an attribute

    that did not actually appear in the source code.
  metadata: {}
uid: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo*
commentId: Overload:Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo
namespace: Microsoft.CodeAnalysis.CSharp
name: GetSpeculativeSymbolInfo
fullName: Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo
nameWithType: CSharpExtensions.GetSpeculativeSymbolInfo
assembliesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp.dll
packagesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp v3.0.0
  monikers:
  - roslyn-dotnet-3.0
- value: Microsoft.CodeAnalysis.CSharp v3.1.0
  monikers:
  - roslyn-dotnet-3.1
- value: Microsoft.CodeAnalysis.CSharp v3.10.0
  monikers:
  - roslyn-dotnet-3.10.0
- value: Microsoft.CodeAnalysis.CSharp v3.11.0
  monikers:
  - roslyn-dotnet-3.11.0
- value: Microsoft.CodeAnalysis.CSharp v3.2.0
  monikers:
  - roslyn-dotnet-3.2
- value: Microsoft.CodeAnalysis.CSharp v3.2.1
  monikers:
  - roslyn-dotnet-3.2.1
- value: Microsoft.CodeAnalysis.CSharp v3.3.1
  monikers:
  - roslyn-dotnet-3.3.1
- value: Microsoft.CodeAnalysis.CSharp v3.4.0
  monikers:
  - roslyn-dotnet-3.4.0
- value: Microsoft.CodeAnalysis.CSharp v3.5.0
  monikers:
  - roslyn-dotnet-3.5.0
- value: Microsoft.CodeAnalysis.CSharp v3.6.0
  monikers:
  - roslyn-dotnet-3.6.0
- value: Microsoft.CodeAnalysis.CSharp v3.7.0
  monikers:
  - roslyn-dotnet-3.7.0
- value: Microsoft.CodeAnalysis.CSharp v3.8.0
  monikers:
  - roslyn-dotnet-3.8.0
- value: Microsoft.CodeAnalysis.CSharp v3.9.0
  monikers:
  - roslyn-dotnet-3.9.0
- value: Microsoft.CodeAnalysis.CSharp v4.0.1
  monikers:
  - roslyn-dotnet-4.0.1
- value: Microsoft.CodeAnalysis.CSharp v4.1.0
  monikers:
  - roslyn-dotnet-4.1.0
- value: Microsoft.CodeAnalysis.CSharp v4.2.0
  monikers:
  - roslyn-dotnet-4.2.0
devLangs:
- cpp
- csharp
- vb
- fsharp
monikers:
- roslyn-dotnet
- roslyn-dotnet-3.0
- roslyn-dotnet-3.1
- roslyn-dotnet-3.10.0
- roslyn-dotnet-3.11.0
- roslyn-dotnet-3.2
- roslyn-dotnet-3.2.1
- roslyn-dotnet-3.3.1
- roslyn-dotnet-3.4.0
- roslyn-dotnet-3.5.0
- roslyn-dotnet-3.6.0
- roslyn-dotnet-3.7.0
- roslyn-dotnet-3.8.0
- roslyn-dotnet-3.9.0
- roslyn-dotnet-4.0.1
- roslyn-dotnet-4.1.0
- roslyn-dotnet-4.2.0
metadata:
  api_name:
  - Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo
  api_location:
  - Microsoft.CodeAnalysis.CSharp.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo
  - Microsoft::CodeAnalysis::CSharp::CSharpExtensions::GetSpeculativeSymbolInfo
  - GetSpeculativeSymbolInfo
  - CSharpExtensions.GetSpeculativeSymbolInfo
  - CSharpExtensions::GetSpeculativeSymbolInfo
  helpviewer_keywords:
  - CSharpExtensions.GetSpeculativeSymbolInfo method [.NET]
  - GetSpeculativeSymbolInfo method [.NET], class CSharpExtensions
  - CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, ExpressionSyntax, SpeculativeBindingOption) extension method [.NET]
  - GetSpeculativeSymbolInfo(SemanticModel, Int32, ExpressionSyntax, SpeculativeBindingOption) extension method [.NET], class CSharpExtensions
  - CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, CrefSyntax, SpeculativeBindingOption) extension method [.NET]
  - GetSpeculativeSymbolInfo(SemanticModel, Int32, CrefSyntax, SpeculativeBindingOption) extension method [.NET], class CSharpExtensions
  - CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, PrimaryConstructorBaseTypeSyntax) extension method [.NET]
  - GetSpeculativeSymbolInfo(SemanticModel, Int32, PrimaryConstructorBaseTypeSyntax) extension method [.NET], class CSharpExtensions
  - CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, ConstructorInitializerSyntax) extension method [.NET]
  - GetSpeculativeSymbolInfo(SemanticModel, Int32, ConstructorInitializerSyntax) extension method [.NET], class CSharpExtensions
  - CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel, Int32, AttributeSyntax) extension method [.NET]
  - GetSpeculativeSymbolInfo(SemanticModel, Int32, AttributeSyntax) extension method [.NET], class CSharpExtensions
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
