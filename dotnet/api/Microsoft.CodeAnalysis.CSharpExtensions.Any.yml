### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
    description: Returns true if the list contains a token which matches <code data-dev-comment-type="paramref">kind</code>
  parameters:
  - namesWithMoniker:
    - value: list
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTokenList?alt=Microsoft.CodeAnalysis.SyntaxTokenList&text=SyntaxTokenList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: kind
    description: The <xref data-throw-if-not-resolved="true" uid="Microsoft.CodeAnalysis.CSharp.SyntaxKind"></xref> to test for.
    type: <xref href="Microsoft.CodeAnalysis.CSharp.SyntaxKind?alt=Microsoft.CodeAnalysis.CSharp.SyntaxKind&text=SyntaxKind" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  commentId: M:Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  name: Any(SyntaxTokenList, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.Any(SyntaxTokenList, SyntaxKind)
  nameWithType: CSharpExtensions.Any(SyntaxTokenList, SyntaxKind)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:

        [System::Runtime::CompilerServices::Extension]
         static bool Any(Microsoft::CodeAnalysis::SyntaxTokenList list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);
  - lang: csharp
    values:
    - value: public static bool Any (this Microsoft.CodeAnalysis.SyntaxTokenList list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);
  - lang: fsharp
    values:
    - value: 'static member Any : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.SyntaxKind -> bool'
  - lang: vb
    values:
    - value: >-
        <Extension()>

        Public Function Any (list As SyntaxTokenList, kind As SyntaxKind) As Boolean
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Tests whether a list contains a token of a particular kind.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: list
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTriviaList?alt=Microsoft.CodeAnalysis.SyntaxTriviaList&text=SyntaxTriviaList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: kind
    type: <xref href="Microsoft.CodeAnalysis.CSharp.SyntaxKind?alt=Microsoft.CodeAnalysis.CSharp.SyntaxKind&text=SyntaxKind" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  commentId: M:Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  name: Any(SyntaxTriviaList, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.Any(SyntaxTriviaList, SyntaxKind)
  nameWithType: CSharpExtensions.Any(SyntaxTriviaList, SyntaxKind)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:

        [System::Runtime::CompilerServices::Extension]
         static bool Any(Microsoft::CodeAnalysis::SyntaxTriviaList list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);
  - lang: csharp
    values:
    - value: public static bool Any (this Microsoft.CodeAnalysis.SyntaxTriviaList list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);
  - lang: fsharp
    values:
    - value: 'static member Any : Microsoft.CodeAnalysis.SyntaxTriviaList * Microsoft.CodeAnalysis.CSharp.SyntaxKind -> bool'
  - lang: vb
    values:
    - value: >-
        <Extension()>

        Public Function Any (list As SyntaxTriviaList, kind As SyntaxKind) As Boolean
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: True if the list has at least one trivia of the specified kind.
  metadata: {}
- typeParameters:
  - name: TNode
  returnsWithMoniker:
    type:
    - value: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: list
    type: <xref href="Microsoft.CodeAnalysis.SeparatedSyntaxList`1?alt=Microsoft.CodeAnalysis.SeparatedSyntaxList`1&text=SeparatedSyntaxList%3CTNode%3E" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: kind
    type: <xref href="Microsoft.CodeAnalysis.CSharp.SyntaxKind?alt=Microsoft.CodeAnalysis.CSharp.SyntaxKind&text=SyntaxKind" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  commentId: M:Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  name: Any<TNode>(SeparatedSyntaxList<TNode>, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.Any<TNode>(SeparatedSyntaxList<TNode>, SyntaxKind)
  nameWithType: CSharpExtensions.Any<TNode>(SeparatedSyntaxList<TNode>, SyntaxKind)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:

        generic <typename TNode>
         where TNode : Microsoft::CodeAnalysis::SyntaxNode[System::Runtime::CompilerServices::Extension]
         static bool Any(Microsoft::CodeAnalysis::SeparatedSyntaxList<TNode> list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);
  - lang: csharp
    values:
    - value: 'public static bool Any<TNode> (this Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) where TNode : Microsoft.CodeAnalysis.SyntaxNode;'
  - lang: fsharp
    values:
    - value: "static member Any : Microsoft.CodeAnalysis.SeparatedSyntaxList<'Node (requires 'Node :> Microsoft.CodeAnalysis.SyntaxNode)> * Microsoft.CodeAnalysis.CSharp.SyntaxKind -> bool (requires 'Node :> Microsoft.CodeAnalysis.SyntaxNode)"
  - lang: vb
    values:
    - value: >-
        <Extension()>

        Public Function Any(Of TNode As SyntaxNode) (list As SeparatedSyntaxList(Of TNode), kind As SyntaxKind) As Boolean
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: True if the list has at least one node of the specified kind.
  metadata: {}
- typeParameters:
  - name: TNode
  returnsWithMoniker:
    type:
    - value: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: list
    type: <xref href="Microsoft.CodeAnalysis.SyntaxList`1?alt=Microsoft.CodeAnalysis.SyntaxList`1&text=SyntaxList%3CTNode%3E" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: kind
    type: <xref href="Microsoft.CodeAnalysis.CSharp.SyntaxKind?alt=Microsoft.CodeAnalysis.CSharp.SyntaxKind&text=SyntaxKind" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  commentId: M:Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)
  name: Any<TNode>(SyntaxList<TNode>, SyntaxKind)
  fullName: Microsoft.CodeAnalysis.CSharpExtensions.Any<TNode>(SyntaxList<TNode>, SyntaxKind)
  nameWithType: CSharpExtensions.Any<TNode>(SyntaxList<TNode>, SyntaxKind)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:

        generic <typename TNode>
         where TNode : Microsoft::CodeAnalysis::SyntaxNode[System::Runtime::CompilerServices::Extension]
         static bool Any(Microsoft::CodeAnalysis::SyntaxList<TNode> list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);
  - lang: csharp
    values:
    - value: 'public static bool Any<TNode> (this Microsoft.CodeAnalysis.SyntaxList<TNode> list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) where TNode : Microsoft.CodeAnalysis.SyntaxNode;'
  - lang: fsharp
    values:
    - value: "static member Any : Microsoft.CodeAnalysis.SyntaxList<'Node (requires 'Node :> Microsoft.CodeAnalysis.SyntaxNode)> * Microsoft.CodeAnalysis.CSharp.SyntaxKind -> bool (requires 'Node :> Microsoft.CodeAnalysis.SyntaxNode)"
  - lang: vb
    values:
    - value: >-
        <Extension()>

        Public Function Any(Of TNode As SyntaxNode) (list As SyntaxList(Of TNode), kind As SyntaxKind) As Boolean
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: True if the list has at least one node of the specified kind.
  metadata: {}
uid: Microsoft.CodeAnalysis.CSharpExtensions.Any*
commentId: Overload:Microsoft.CodeAnalysis.CSharpExtensions.Any
namespace: Microsoft.CodeAnalysis
name: Any
fullName: Microsoft.CodeAnalysis.CSharpExtensions.Any
nameWithType: CSharpExtensions.Any
assembliesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp.dll
packagesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp v3.0.0
  monikers:
  - roslyn-dotnet-3.0
- value: Microsoft.CodeAnalysis.CSharp v3.1.0
  monikers:
  - roslyn-dotnet-3.1
- value: Microsoft.CodeAnalysis.CSharp v3.10.0
  monikers:
  - roslyn-dotnet-3.10.0
- value: Microsoft.CodeAnalysis.CSharp v3.11.0
  monikers:
  - roslyn-dotnet-3.11.0
- value: Microsoft.CodeAnalysis.CSharp v3.2.0
  monikers:
  - roslyn-dotnet-3.2
- value: Microsoft.CodeAnalysis.CSharp v3.2.1
  monikers:
  - roslyn-dotnet-3.2.1
- value: Microsoft.CodeAnalysis.CSharp v3.3.1
  monikers:
  - roslyn-dotnet-3.3.1
- value: Microsoft.CodeAnalysis.CSharp v3.4.0
  monikers:
  - roslyn-dotnet-3.4.0
- value: Microsoft.CodeAnalysis.CSharp v3.5.0
  monikers:
  - roslyn-dotnet-3.5.0
- value: Microsoft.CodeAnalysis.CSharp v3.6.0
  monikers:
  - roslyn-dotnet-3.6.0
- value: Microsoft.CodeAnalysis.CSharp v3.7.0
  monikers:
  - roslyn-dotnet-3.7.0
- value: Microsoft.CodeAnalysis.CSharp v3.8.0
  monikers:
  - roslyn-dotnet-3.8.0
- value: Microsoft.CodeAnalysis.CSharp v3.9.0
  monikers:
  - roslyn-dotnet-3.9.0
- value: Microsoft.CodeAnalysis.CSharp v4.0.1
  monikers:
  - roslyn-dotnet-4.0.1
- value: Microsoft.CodeAnalysis.CSharp v4.1.0
  monikers:
  - roslyn-dotnet-4.1.0
- value: Microsoft.CodeAnalysis.CSharp v4.2.0
  monikers:
  - roslyn-dotnet-4.2.0
devLangs:
- cpp
- csharp
- vb
- fsharp
monikers:
- roslyn-dotnet
- roslyn-dotnet-3.0
- roslyn-dotnet-3.1
- roslyn-dotnet-3.10.0
- roslyn-dotnet-3.11.0
- roslyn-dotnet-3.2
- roslyn-dotnet-3.2.1
- roslyn-dotnet-3.3.1
- roslyn-dotnet-3.4.0
- roslyn-dotnet-3.5.0
- roslyn-dotnet-3.6.0
- roslyn-dotnet-3.7.0
- roslyn-dotnet-3.8.0
- roslyn-dotnet-3.9.0
- roslyn-dotnet-4.0.1
- roslyn-dotnet-4.1.0
- roslyn-dotnet-4.2.0
metadata:
  api_name:
  - Microsoft.CodeAnalysis.CSharpExtensions.Any
  api_location:
  - Microsoft.CodeAnalysis.CSharp.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.CodeAnalysis.CSharpExtensions.Any
  - Microsoft::CodeAnalysis::CSharpExtensions::Any
  - Any
  - CSharpExtensions.Any
  - CSharpExtensions::Any
  - Microsoft.CodeAnalysis.CSharpExtensions.Any``1
  - Microsoft::CodeAnalysis::CSharpExtensions::Any``1
  - Any``1
  - CSharpExtensions.Any``1
  - CSharpExtensions::Any``1
  helpviewer_keywords:
  - CSharpExtensions.Any method [.NET]
  - Any method [.NET], class CSharpExtensions
  - CSharpExtensions.Any(SyntaxTokenList, SyntaxKind) extension method [.NET]
  - Any(SyntaxTokenList, SyntaxKind) extension method [.NET], class CSharpExtensions
  - CSharpExtensions.Any(SyntaxTriviaList, SyntaxKind) extension method [.NET]
  - Any(SyntaxTriviaList, SyntaxKind) extension method [.NET], class CSharpExtensions
  - CSharpExtensions.Any<TNode>(SeparatedSyntaxList<TNode>, SyntaxKind) extension method [.NET]
  - Any<TNode>(SeparatedSyntaxList<TNode>, SyntaxKind) extension method [.NET], class CSharpExtensions
  - CSharpExtensions.Any<TNode>(SyntaxList<TNode>, SyntaxKind) extension method [.NET]
  - Any<TNode>(SyntaxList<TNode>, SyntaxKind) extension method [.NET], class CSharpExtensions
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
