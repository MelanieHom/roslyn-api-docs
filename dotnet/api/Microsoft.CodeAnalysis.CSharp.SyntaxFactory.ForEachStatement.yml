### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax&text=ForEachStatementSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: attributeLists
    type: <xref href="Microsoft.CodeAnalysis.SyntaxList`1?alt=Microsoft.CodeAnalysis.SyntaxList&text=SyntaxList" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&text=AttributeListSyntax" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: awaitKeyword
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: forEachKeyword
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: openParenToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: type
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&text=TypeSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: identifier
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: inKeyword
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expression
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: closeParenToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: statement
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&text=StatementSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  name: ForEachStatement(SyntaxList<AttributeListSyntax>, SyntaxToken, SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(SyntaxList<AttributeListSyntax>, SyntaxToken, SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  nameWithType: SyntaxFactory.ForEachStatement(SyntaxList<AttributeListSyntax>, SyntaxToken, SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement (Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.SyntaxToken forEachKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);
  - lang: fsharp
    values:
    - value: 'static member ForEachStatement : Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax'
  - lang: vb
    values:
    - value: Public Shared Function ForEachStatement (attributeLists As SyntaxList(Of AttributeListSyntax), awaitKeyword As SyntaxToken, forEachKeyword As SyntaxToken, openParenToken As SyntaxToken, type As TypeSyntax, identifier As SyntaxToken, inKeyword As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken, statement As StatementSyntax) As ForEachStatementSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new ForEachStatementSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax&text=ForEachStatementSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: awaitKeyword
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: forEachKeyword
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: openParenToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: type
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&text=TypeSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: identifier
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: inKeyword
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expression
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: closeParenToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: statement
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&text=StatementSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  name: ForEachStatement(SyntaxToken, SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(SyntaxToken, SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  nameWithType: SyntaxFactory.ForEachStatement(SyntaxToken, SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement (Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.SyntaxToken forEachKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);
  - lang: fsharp
    values:
    - value: 'static member ForEachStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax'
  - lang: vb
    values:
    - value: Public Shared Function ForEachStatement (awaitKeyword As SyntaxToken, forEachKeyword As SyntaxToken, openParenToken As SyntaxToken, type As TypeSyntax, identifier As SyntaxToken, inKeyword As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken, statement As StatementSyntax) As ForEachStatementSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new ForEachStatementSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax&text=ForEachStatementSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: forEachKeyword
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: openParenToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: type
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&text=TypeSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: identifier
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: inKeyword
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expression
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: closeParenToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: statement
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&text=StatementSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  name: ForEachStatement(SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  nameWithType: SyntaxFactory.ForEachStatement(SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::CSharp::Syntax::ForEachStatementSyntax ^ ForEachStatement(Microsoft::CodeAnalysis::SyntaxToken forEachKeyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::CSharp::Syntax::TypeSyntax ^ type, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::SyntaxToken inKeyword, Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken closeParenToken, Microsoft::CodeAnalysis::CSharp::Syntax::StatementSyntax ^ statement);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement (Microsoft.CodeAnalysis.SyntaxToken forEachKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);
  - lang: fsharp
    values:
    - value: 'static member ForEachStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax'
  - lang: vb
    values:
    - value: Public Shared Function ForEachStatement (forEachKeyword As SyntaxToken, openParenToken As SyntaxToken, type As TypeSyntax, identifier As SyntaxToken, inKeyword As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken, statement As StatementSyntax) As ForEachStatementSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new ForEachStatementSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax&text=ForEachStatementSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: type
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&text=TypeSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: identifier
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expression
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: statement
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&text=StatementSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  name: ForEachStatement(TypeSyntax, String, ExpressionSyntax, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(TypeSyntax, String, ExpressionSyntax, StatementSyntax)
  nameWithType: SyntaxFactory.ForEachStatement(TypeSyntax, String, ExpressionSyntax, StatementSyntax)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::CSharp::Syntax::ForEachStatementSyntax ^ ForEachStatement(Microsoft::CodeAnalysis::CSharp::Syntax::TypeSyntax ^ type, System::String ^ identifier, Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::CSharp::Syntax::StatementSyntax ^ statement);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, string identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);
  - lang: fsharp
    values:
    - value: 'static member ForEachStatement : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * string * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax'
  - lang: vb
    values:
    - value: Public Shared Function ForEachStatement (type As TypeSyntax, identifier As String, expression As ExpressionSyntax, statement As StatementSyntax) As ForEachStatementSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new ForEachStatementSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax&text=ForEachStatementSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: type
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&text=TypeSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: identifier
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expression
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: statement
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&text=StatementSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  name: ForEachStatement(TypeSyntax, SyntaxToken, ExpressionSyntax, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(TypeSyntax, SyntaxToken, ExpressionSyntax, StatementSyntax)
  nameWithType: SyntaxFactory.ForEachStatement(TypeSyntax, SyntaxToken, ExpressionSyntax, StatementSyntax)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::CSharp::Syntax::ForEachStatementSyntax ^ ForEachStatement(Microsoft::CodeAnalysis::CSharp::Syntax::TypeSyntax ^ type, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::CSharp::Syntax::StatementSyntax ^ statement);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);
  - lang: fsharp
    values:
    - value: 'static member ForEachStatement : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax'
  - lang: vb
    values:
    - value: Public Shared Function ForEachStatement (type As TypeSyntax, identifier As SyntaxToken, expression As ExpressionSyntax, statement As StatementSyntax) As ForEachStatementSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new ForEachStatementSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax&text=ForEachStatementSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: attributeLists
    type: <xref href="Microsoft.CodeAnalysis.SyntaxList`1?alt=Microsoft.CodeAnalysis.SyntaxList&text=SyntaxList" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&text=AttributeListSyntax" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: type
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&text=TypeSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: identifier
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expression
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: statement
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&text=StatementSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)
  name: ForEachStatement(SyntaxList<AttributeListSyntax>, TypeSyntax, SyntaxToken, ExpressionSyntax, StatementSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(SyntaxList<AttributeListSyntax>, TypeSyntax, SyntaxToken, ExpressionSyntax, StatementSyntax)
  nameWithType: SyntaxFactory.ForEachStatement(SyntaxList<AttributeListSyntax>, TypeSyntax, SyntaxToken, ExpressionSyntax, StatementSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement (Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);
  - lang: fsharp
    values:
    - value: 'static member ForEachStatement : Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax'
  - lang: vb
    values:
    - value: Public Shared Function ForEachStatement (attributeLists As SyntaxList(Of AttributeListSyntax), type As TypeSyntax, identifier As SyntaxToken, expression As ExpressionSyntax, statement As StatementSyntax) As ForEachStatementSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new ForEachStatementSyntax instance.
  metadata: {}
uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement*
commentId: Overload:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement
namespace: Microsoft.CodeAnalysis.CSharp
name: ForEachStatement
fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement
nameWithType: SyntaxFactory.ForEachStatement
assembliesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp.dll
packagesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp v3.10.0
  monikers:
  - roslyn-dotnet-3.10.0
- value: Microsoft.CodeAnalysis.CSharp v3.11.0
  monikers:
  - roslyn-dotnet-3.11.0
- value: Microsoft.CodeAnalysis.CSharp v3.6.0
  monikers:
  - roslyn-dotnet-3.6.0
- value: Microsoft.CodeAnalysis.CSharp v3.7.0
  monikers:
  - roslyn-dotnet-3.7.0
- value: Microsoft.CodeAnalysis.CSharp v3.8.0
  monikers:
  - roslyn-dotnet-3.8.0
- value: Microsoft.CodeAnalysis.CSharp v3.9.0
  monikers:
  - roslyn-dotnet-3.9.0
- value: Microsoft.CodeAnalysis.CSharp v4.0.1
  monikers:
  - roslyn-dotnet-4.0.1
- value: Microsoft.CodeAnalysis.CSharp v4.1.0
  monikers:
  - roslyn-dotnet-4.1.0
- value: Microsoft.CodeAnalysis.CSharp v4.2.0
  monikers:
  - roslyn-dotnet-4.2.0
- value: Microsoft.CodeAnalysis.CSharp v3.0.0
  monikers:
  - roslyn-dotnet-3.0
- value: Microsoft.CodeAnalysis.CSharp v3.1.0
  monikers:
  - roslyn-dotnet-3.1
- value: Microsoft.CodeAnalysis.CSharp v3.2.0
  monikers:
  - roslyn-dotnet-3.2
- value: Microsoft.CodeAnalysis.CSharp v3.2.1
  monikers:
  - roslyn-dotnet-3.2.1
- value: Microsoft.CodeAnalysis.CSharp v3.3.1
  monikers:
  - roslyn-dotnet-3.3.1
- value: Microsoft.CodeAnalysis.CSharp v3.4.0
  monikers:
  - roslyn-dotnet-3.4.0
- value: Microsoft.CodeAnalysis.CSharp v3.5.0
  monikers:
  - roslyn-dotnet-3.5.0
devLangs:
- csharp
- vb
- fsharp
- cpp
monikers:
- roslyn-dotnet
- roslyn-dotnet-3.10.0
- roslyn-dotnet-3.11.0
- roslyn-dotnet-3.6.0
- roslyn-dotnet-3.7.0
- roslyn-dotnet-3.8.0
- roslyn-dotnet-3.9.0
- roslyn-dotnet-4.0.1
- roslyn-dotnet-4.1.0
- roslyn-dotnet-4.2.0
- roslyn-dotnet-3.0
- roslyn-dotnet-3.1
- roslyn-dotnet-3.2
- roslyn-dotnet-3.2.1
- roslyn-dotnet-3.3.1
- roslyn-dotnet-3.4.0
- roslyn-dotnet-3.5.0
metadata:
  api_name:
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement
  api_location:
  - Microsoft.CodeAnalysis.CSharp.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement
  - Microsoft::CodeAnalysis::CSharp::SyntaxFactory::ForEachStatement
  - ForEachStatement
  - SyntaxFactory.ForEachStatement
  - SyntaxFactory::ForEachStatement
  helpviewer_keywords:
  - SyntaxFactory.ForEachStatement method [.NET]
  - ForEachStatement method [.NET], class SyntaxFactory
  - SyntaxFactory.ForEachStatement(SyntaxList<AttributeListSyntax>, SyntaxToken, SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax) method [.NET]
  - ForEachStatement(SyntaxList<AttributeListSyntax>, SyntaxToken, SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.ForEachStatement(SyntaxToken, SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax) method [.NET]
  - ForEachStatement(SyntaxToken, SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.ForEachStatement(SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax) method [.NET]
  - ForEachStatement(SyntaxToken, SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.ForEachStatement(TypeSyntax, String, ExpressionSyntax, StatementSyntax) method [.NET]
  - ForEachStatement(TypeSyntax, String, ExpressionSyntax, StatementSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.ForEachStatement(TypeSyntax, SyntaxToken, ExpressionSyntax, StatementSyntax) method [.NET]
  - ForEachStatement(TypeSyntax, SyntaxToken, ExpressionSyntax, StatementSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.ForEachStatement(SyntaxList<AttributeListSyntax>, TypeSyntax, SyntaxToken, ExpressionSyntax, StatementSyntax) method [.NET]
  - ForEachStatement(SyntaxList<AttributeListSyntax>, TypeSyntax, SyntaxToken, ExpressionSyntax, StatementSyntax) method [.NET], class SyntaxFactory
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
