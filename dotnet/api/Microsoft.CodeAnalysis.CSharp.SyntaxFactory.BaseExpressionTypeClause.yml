### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionTypeClauseSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionTypeClauseSyntax&text=BaseExpressionTypeClauseSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: baseType
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&text=TypeSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpressionTypeClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpressionTypeClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)
  name: BaseExpressionTypeClause(TypeSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpressionTypeClause(TypeSyntax)
  nameWithType: SyntaxFactory.BaseExpressionTypeClause(TypeSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionTypeClauseSyntax BaseExpressionTypeClause (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax baseType);
  - lang: fsharp
    values:
    - value: 'static member BaseExpressionTypeClause : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionTypeClauseSyntax'
  - lang: vb
    values:
    - value: Public Shared Function BaseExpressionTypeClause (baseType As TypeSyntax) As BaseExpressionTypeClauseSyntax
  monikers:
  - roslyn-dotnet-3.1
  summary: Creates a new BaseExpressionTypeClauseSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionTypeClauseSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionTypeClauseSyntax&text=BaseExpressionTypeClauseSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: openParenToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: baseType
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&text=TypeSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: closeParenToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpressionTypeClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpressionTypeClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)
  name: BaseExpressionTypeClause(SyntaxToken, TypeSyntax, SyntaxToken)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpressionTypeClause(SyntaxToken, TypeSyntax, SyntaxToken)
  nameWithType: SyntaxFactory.BaseExpressionTypeClause(SyntaxToken, TypeSyntax, SyntaxToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionTypeClauseSyntax BaseExpressionTypeClause (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax baseType, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);
  - lang: fsharp
    values:
    - value: 'static member BaseExpressionTypeClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -> Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionTypeClauseSyntax'
  - lang: vb
    values:
    - value: Public Shared Function BaseExpressionTypeClause (openParenToken As SyntaxToken, baseType As TypeSyntax, closeParenToken As SyntaxToken) As BaseExpressionTypeClauseSyntax
  monikers:
  - roslyn-dotnet-3.1
  summary: Creates a new BaseExpressionTypeClauseSyntax instance.
  metadata: {}
uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpressionTypeClause*
commentId: Overload:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpressionTypeClause
namespace: Microsoft.CodeAnalysis.CSharp
name: BaseExpressionTypeClause
fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpressionTypeClause
nameWithType: SyntaxFactory.BaseExpressionTypeClause
assembliesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp.dll
packagesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp v3.1.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- roslyn-dotnet-3.1
metadata:
  api_name:
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpressionTypeClause
  api_location:
  - Microsoft.CodeAnalysis.CSharp.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpressionTypeClause
  - Microsoft::CodeAnalysis::CSharp::SyntaxFactory::BaseExpressionTypeClause
  - BaseExpressionTypeClause
  - SyntaxFactory.BaseExpressionTypeClause
  - SyntaxFactory::BaseExpressionTypeClause
  helpviewer_keywords:
  - SyntaxFactory.BaseExpressionTypeClause method [.NET]
  - BaseExpressionTypeClause method [.NET], class SyntaxFactory
  - SyntaxFactory.BaseExpressionTypeClause(TypeSyntax) method [.NET]
  - BaseExpressionTypeClause(TypeSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.BaseExpressionTypeClause(SyntaxToken, TypeSyntax, SyntaxToken) method [.NET]
  - BaseExpressionTypeClause(SyntaxToken, TypeSyntax, SyntaxToken) method [.NET], class SyntaxFactory
  monikers:
  - roslyn-dotnet-3.1
