### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: symbol
    type: <xref href="Microsoft.CodeAnalysis.ISymbol?alt=Microsoft.CodeAnalysis.ISymbol&text=ISymbol" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: within
    type: <xref href="Microsoft.CodeAnalysis.ISymbol?alt=Microsoft.CodeAnalysis.ISymbol&text=ISymbol" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: throughType
    type: <xref href="Microsoft.CodeAnalysis.ITypeSymbol?alt=Microsoft.CodeAnalysis.ITypeSymbol&text=ITypeSymbol" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.Compilation.IsSymbolAccessibleWithin(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol)
  commentId: M:Microsoft.CodeAnalysis.Compilation.IsSymbolAccessibleWithin(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol)
  name: IsSymbolAccessibleWithin(ISymbol, ISymbol, ITypeSymbol)
  fullName: Microsoft.CodeAnalysis.Compilation.IsSymbolAccessibleWithin(ISymbol, ISymbol, ITypeSymbol)
  nameWithType: Compilation.IsSymbolAccessibleWithin(ISymbol, ISymbol, ITypeSymbol)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public bool IsSymbolAccessibleWithin (Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.ISymbol within, Microsoft.CodeAnalysis.ITypeSymbol throughType = default);
      monikers:
      - roslyn-dotnet-3.0
      - roslyn-dotnet-3.1
      - roslyn-dotnet-3.2
      - roslyn-dotnet-3.2.1
      - roslyn-dotnet-3.3.1
      - roslyn-dotnet-3.4.0
    - value: public bool IsSymbolAccessibleWithin (Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.ISymbol within, Microsoft.CodeAnalysis.ITypeSymbol? throughType = default);
      monikers:
      - roslyn-dotnet-3.10.0
      - roslyn-dotnet-3.11.0
      - roslyn-dotnet-3.5.0
      - roslyn-dotnet-3.6.0
      - roslyn-dotnet-3.7.0
      - roslyn-dotnet-3.8.0
      - roslyn-dotnet-3.9.0
      - roslyn-dotnet-4.0.1
      - roslyn-dotnet-4.1.0
      - roslyn-dotnet-4.2.0
  - lang: fsharp
    values:
    - value: 'member this.IsSymbolAccessibleWithin : Microsoft.CodeAnalysis.ISymbol * Microsoft.CodeAnalysis.ISymbol * Microsoft.CodeAnalysis.ITypeSymbol -> bool'
  - lang: vb
    values:
    - value: Public Function IsSymbolAccessibleWithin (symbol As ISymbol, within As ISymbol, Optional throughType As ITypeSymbol = Nothing) As Boolean
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: >-
    Checks if <code data-dev-comment-type="paramref">symbol</code> is accessible from within <code data-dev-comment-type="paramref">within</code>. An optional qualifier of type

    <code data-dev-comment-type="paramref">throughType</code> is used to resolve protected access for instance members. All symbols are

    required to be from this compilation or some assembly referenced (<xref data-throw-if-not-resolved="true" uid="Microsoft.CodeAnalysis.Compilation.References"></xref>) by this

    compilation. <code data-dev-comment-type="paramref">within</code> is required to be an <xref data-throw-if-not-resolved="true" uid="Microsoft.CodeAnalysis.INamedTypeSymbol"></xref> or <xref data-throw-if-not-resolved="true" uid="Microsoft.CodeAnalysis.IAssemblySymbol"></xref>.
  remarks: <p>Submissions can reference symbols from previous submissions and their referenced assemblies, even though those references are missing from <xref data-throw-if-not-resolved="true" uid="Microsoft.CodeAnalysis.Compilation.References"></xref>. See https://github.com/dotnet/roslyn/issues/27356. This implementation works around that by permitting symbols from previous submissions as well.</p><p>It is advised to avoid the use of this API within the compilers, as the compilers have additional requirements for access checking that are not satisfied by this implementation, including the avoidance of infinite recursion that could result from the use of the ISymbol APIs here, the detection of use-site diagnostics, and additional returned details (from the compiler's internal APIs) that are helpful for more precisely diagnosing reasons for accessibility failure.</p>
  metadata: {}
uid: Microsoft.CodeAnalysis.Compilation.IsSymbolAccessibleWithin*
commentId: Overload:Microsoft.CodeAnalysis.Compilation.IsSymbolAccessibleWithin
namespace: Microsoft.CodeAnalysis
name: IsSymbolAccessibleWithin
fullName: Microsoft.CodeAnalysis.Compilation.IsSymbolAccessibleWithin
nameWithType: Compilation.IsSymbolAccessibleWithin
assembliesWithMoniker:
- value: Microsoft.CodeAnalysis.dll
packagesWithMoniker:
- value: Microsoft.CodeAnalysis.Common v3.0.0
  monikers:
  - roslyn-dotnet-3.0
- value: Microsoft.CodeAnalysis.Common v3.1.0
  monikers:
  - roslyn-dotnet-3.1
- value: Microsoft.CodeAnalysis.Common v3.10.0
  monikers:
  - roslyn-dotnet-3.10.0
- value: Microsoft.CodeAnalysis.Common v3.11.0
  monikers:
  - roslyn-dotnet-3.11.0
- value: Microsoft.CodeAnalysis.Common v3.2.0
  monikers:
  - roslyn-dotnet-3.2
- value: Microsoft.CodeAnalysis.Common v3.2.1
  monikers:
  - roslyn-dotnet-3.2.1
- value: Microsoft.CodeAnalysis.Common v3.3.1
  monikers:
  - roslyn-dotnet-3.3.1
- value: Microsoft.CodeAnalysis.Common v3.4.0
  monikers:
  - roslyn-dotnet-3.4.0
- value: Microsoft.CodeAnalysis.Common v3.5.0
  monikers:
  - roslyn-dotnet-3.5.0
- value: Microsoft.CodeAnalysis.Common v3.6.0
  monikers:
  - roslyn-dotnet-3.6.0
- value: Microsoft.CodeAnalysis.Common v3.7.0
  monikers:
  - roslyn-dotnet-3.7.0
- value: Microsoft.CodeAnalysis.Common v3.8.0
  monikers:
  - roslyn-dotnet-3.8.0
- value: Microsoft.CodeAnalysis.Common v3.9.0
  monikers:
  - roslyn-dotnet-3.9.0
- value: Microsoft.CodeAnalysis.Common v4.0.1
  monikers:
  - roslyn-dotnet-4.0.1
- value: Microsoft.CodeAnalysis.Common v4.1.0
  monikers:
  - roslyn-dotnet-4.1.0
- value: Microsoft.CodeAnalysis.Common v4.2.0
  monikers:
  - roslyn-dotnet-4.2.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- roslyn-dotnet
- roslyn-dotnet-3.0
- roslyn-dotnet-3.1
- roslyn-dotnet-3.10.0
- roslyn-dotnet-3.11.0
- roslyn-dotnet-3.2
- roslyn-dotnet-3.2.1
- roslyn-dotnet-3.3.1
- roslyn-dotnet-3.4.0
- roslyn-dotnet-3.5.0
- roslyn-dotnet-3.6.0
- roslyn-dotnet-3.7.0
- roslyn-dotnet-3.8.0
- roslyn-dotnet-3.9.0
- roslyn-dotnet-4.0.1
- roslyn-dotnet-4.1.0
- roslyn-dotnet-4.2.0
metadata:
  api_name:
  - Microsoft.CodeAnalysis.Compilation.IsSymbolAccessibleWithin
  api_location:
  - Microsoft.CodeAnalysis.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.CodeAnalysis.Compilation.IsSymbolAccessibleWithin
  - Microsoft::CodeAnalysis::Compilation::IsSymbolAccessibleWithin
  - IsSymbolAccessibleWithin
  - Compilation.IsSymbolAccessibleWithin
  - Compilation::IsSymbolAccessibleWithin
  helpviewer_keywords:
  - Compilation.IsSymbolAccessibleWithin method [.NET]
  - IsSymbolAccessibleWithin method [.NET], class Compilation
  - Compilation.IsSymbolAccessibleWithin(ISymbol, ISymbol, ITypeSymbol) method [.NET]
  - IsSymbolAccessibleWithin(ISymbol, ISymbol, ITypeSymbol) method [.NET], class Compilation
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
