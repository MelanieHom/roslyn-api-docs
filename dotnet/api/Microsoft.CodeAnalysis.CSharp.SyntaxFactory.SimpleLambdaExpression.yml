### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax&text=SimpleLambdaExpressionSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: attributeLists
    type: <xref href="Microsoft.CodeAnalysis.SyntaxList`1?alt=Microsoft.CodeAnalysis.SyntaxList&text=SyntaxList" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&text=AttributeListSyntax" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: modifiers
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTokenList?alt=Microsoft.CodeAnalysis.SyntaxTokenList&text=SyntaxTokenList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: parameter
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&text=ParameterSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: arrowToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: block
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax&text=BlockSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expressionBody
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  name: SimpleLambdaExpression(SyntaxList<AttributeListSyntax>, SyntaxTokenList, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(SyntaxList<AttributeListSyntax>, SyntaxTokenList, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax)
  nameWithType: SyntaxFactory.SimpleLambdaExpression(SyntaxList<AttributeListSyntax>, SyntaxTokenList, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.SyntaxToken arrowToken, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax? block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody);
  - lang: fsharp
    values:
    - value: 'static member SimpleLambdaExpression : Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax'
  - lang: vb
    values:
    - value: Public Shared Function SimpleLambdaExpression (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, parameter As ParameterSyntax, arrowToken As SyntaxToken, block As BlockSyntax, expressionBody As ExpressionSyntax) As SimpleLambdaExpressionSyntax
  monikers:
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new SimpleLambdaExpressionSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax&text=SimpleLambdaExpressionSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: attributeLists
    type: <xref href="Microsoft.CodeAnalysis.SyntaxList`1?alt=Microsoft.CodeAnalysis.SyntaxList&text=SyntaxList" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&text=AttributeListSyntax" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: modifiers
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTokenList?alt=Microsoft.CodeAnalysis.SyntaxTokenList&text=SyntaxTokenList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: parameter
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&text=ParameterSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: block
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax&text=BlockSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expressionBody
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  name: SimpleLambdaExpression(SyntaxList<AttributeListSyntax>, SyntaxTokenList, ParameterSyntax, BlockSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(SyntaxList<AttributeListSyntax>, SyntaxTokenList, ParameterSyntax, BlockSyntax, ExpressionSyntax)
  nameWithType: SyntaxFactory.SimpleLambdaExpression(SyntaxList<AttributeListSyntax>, SyntaxTokenList, ParameterSyntax, BlockSyntax, ExpressionSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax? block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody);
  - lang: fsharp
    values:
    - value: 'static member SimpleLambdaExpression : Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax> * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax'
  - lang: vb
    values:
    - value: Public Shared Function SimpleLambdaExpression (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, parameter As ParameterSyntax, block As BlockSyntax, expressionBody As ExpressionSyntax) As SimpleLambdaExpressionSyntax
  monikers:
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new SimpleLambdaExpressionSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax&text=SimpleLambdaExpressionSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: modifiers
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTokenList?alt=Microsoft.CodeAnalysis.SyntaxTokenList&text=SyntaxTokenList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: parameter
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&text=ParameterSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: arrowToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: block
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax&text=BlockSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expressionBody
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  name: SimpleLambdaExpression(SyntaxTokenList, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(SyntaxTokenList, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax)
  nameWithType: SyntaxFactory.SimpleLambdaExpression(SyntaxTokenList, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.SyntaxToken arrowToken, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax? block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody);
  - lang: fsharp
    values:
    - value: 'static member SimpleLambdaExpression : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax'
  - lang: vb
    values:
    - value: Public Shared Function SimpleLambdaExpression (modifiers As SyntaxTokenList, parameter As ParameterSyntax, arrowToken As SyntaxToken, block As BlockSyntax, expressionBody As ExpressionSyntax) As SimpleLambdaExpressionSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new SimpleLambdaExpressionSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax&text=SimpleLambdaExpressionSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: modifiers
    type: <xref href="Microsoft.CodeAnalysis.SyntaxTokenList?alt=Microsoft.CodeAnalysis.SyntaxTokenList&text=SyntaxTokenList" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: parameter
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&text=ParameterSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: block
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax&text=BlockSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expressionBody
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  name: SimpleLambdaExpression(SyntaxTokenList, ParameterSyntax, BlockSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(SyntaxTokenList, ParameterSyntax, BlockSyntax, ExpressionSyntax)
  nameWithType: SyntaxFactory.SimpleLambdaExpression(SyntaxTokenList, ParameterSyntax, BlockSyntax, ExpressionSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax? block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody);
  - lang: fsharp
    values:
    - value: 'static member SimpleLambdaExpression : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax'
  - lang: vb
    values:
    - value: Public Shared Function SimpleLambdaExpression (modifiers As SyntaxTokenList, parameter As ParameterSyntax, block As BlockSyntax, expressionBody As ExpressionSyntax) As SimpleLambdaExpressionSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new SimpleLambdaExpressionSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax&text=SimpleLambdaExpressionSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: asyncKeyword
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: parameter
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&text=ParameterSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: arrowToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: block
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax&text=BlockSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expressionBody
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  name: SimpleLambdaExpression(SyntaxToken, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(SyntaxToken, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax)
  nameWithType: SyntaxFactory.SimpleLambdaExpression(SyntaxToken, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.SyntaxToken asyncKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.SyntaxToken arrowToken, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expressionBody);
      monikers:
      - roslyn-dotnet-3.10.0
      - roslyn-dotnet-3.8.0
      - roslyn-dotnet-3.9.0
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.SyntaxToken asyncKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.SyntaxToken arrowToken, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax? block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody);
      monikers:
      - roslyn-dotnet-3.11.0
      - roslyn-dotnet-3.4.0
      - roslyn-dotnet-3.5.0
      - roslyn-dotnet-3.6.0
      - roslyn-dotnet-3.7.0
      - roslyn-dotnet-4.0.1
      - roslyn-dotnet-4.1.0
      - roslyn-dotnet-4.2.0
  - lang: fsharp
    values:
    - value: 'static member SimpleLambdaExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax'
  - lang: vb
    values:
    - value: Public Shared Function SimpleLambdaExpression (asyncKeyword As SyntaxToken, parameter As ParameterSyntax, arrowToken As SyntaxToken, block As BlockSyntax, expressionBody As ExpressionSyntax) As SimpleLambdaExpressionSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new SimpleLambdaExpressionSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax&text=SimpleLambdaExpressionSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: parameter
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&text=ParameterSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: block
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax&text=BlockSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: expressionBody
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&text=ExpressionSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)
  name: SimpleLambdaExpression(ParameterSyntax, BlockSyntax, ExpressionSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(ParameterSyntax, BlockSyntax, ExpressionSyntax)
  nameWithType: SyntaxFactory.SimpleLambdaExpression(ParameterSyntax, BlockSyntax, ExpressionSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expressionBody);
      monikers:
      - roslyn-dotnet-3.10.0
      - roslyn-dotnet-3.8.0
      - roslyn-dotnet-3.9.0
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax? block, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax? expressionBody);
      monikers:
      - roslyn-dotnet-3.11.0
      - roslyn-dotnet-3.4.0
      - roslyn-dotnet-3.5.0
      - roslyn-dotnet-3.6.0
      - roslyn-dotnet-3.7.0
      - roslyn-dotnet-4.0.1
      - roslyn-dotnet-4.1.0
      - roslyn-dotnet-4.2.0
  - lang: fsharp
    values:
    - value: 'static member SimpleLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax'
  - lang: vb
    values:
    - value: Public Shared Function SimpleLambdaExpression (parameter As ParameterSyntax, block As BlockSyntax, expressionBody As ExpressionSyntax) As SimpleLambdaExpressionSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new SimpleLambdaExpressionSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax&text=SimpleLambdaExpressionSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: parameter
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&text=ParameterSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: body
    type: <xref href="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?alt=Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode&text=CSharpSyntaxNode" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  name: SimpleLambdaExpression(ParameterSyntax, CSharpSyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(ParameterSyntax, CSharpSyntaxNode)
  nameWithType: SyntaxFactory.SimpleLambdaExpression(ParameterSyntax, CSharpSyntaxNode)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::CSharp::Syntax::SimpleLambdaExpressionSyntax ^ SimpleLambdaExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ParameterSyntax ^ parameter, Microsoft::CodeAnalysis::CSharp::CSharpSyntaxNode ^ body);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body);
  - lang: fsharp
    values:
    - value: 'static member SimpleLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax * Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode -> Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax'
  - lang: vb
    values:
    - value: Public Shared Function SimpleLambdaExpression (parameter As ParameterSyntax, body As CSharpSyntaxNode) As SimpleLambdaExpressionSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new SimpleLambdaExpressionSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax&text=SimpleLambdaExpressionSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: parameter
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&text=ParameterSyntax" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)
  name: SimpleLambdaExpression(ParameterSyntax)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(ParameterSyntax)
  nameWithType: SyntaxFactory.SimpleLambdaExpression(ParameterSyntax)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter);
  - lang: fsharp
    values:
    - value: 'static member SimpleLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax -> Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax'
  - lang: vb
    values:
    - value: Public Shared Function SimpleLambdaExpression (parameter As ParameterSyntax) As SimpleLambdaExpressionSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new SimpleLambdaExpressionSyntax instance.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax&text=SimpleLambdaExpressionSyntax" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: asyncKeyword
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: parameter
    type: <xref href="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax?alt=Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&text=ParameterSyntax" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: arrowToken
    type: <xref href="Microsoft.CodeAnalysis.SyntaxToken?alt=Microsoft.CodeAnalysis.SyntaxToken&text=SyntaxToken" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: body
    type: <xref href="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode?alt=Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode&text=CSharpSyntaxNode" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  commentId: M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
  name: SimpleLambdaExpression(SyntaxToken, ParameterSyntax, SyntaxToken, CSharpSyntaxNode)
  fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(SyntaxToken, ParameterSyntax, SyntaxToken, CSharpSyntaxNode)
  nameWithType: SyntaxFactory.SimpleLambdaExpression(SyntaxToken, ParameterSyntax, SyntaxToken, CSharpSyntaxNode)
  syntaxWithMoniker:
  - lang: cpp
    values:
    - value: >-
        public:
         static Microsoft::CodeAnalysis::CSharp::Syntax::SimpleLambdaExpressionSyntax ^ SimpleLambdaExpression(Microsoft::CodeAnalysis::SyntaxToken asyncKeyword, Microsoft::CodeAnalysis::CSharp::Syntax::ParameterSyntax ^ parameter, Microsoft::CodeAnalysis::SyntaxToken arrowToken, Microsoft::CodeAnalysis::CSharp::CSharpSyntaxNode ^ body);
  - lang: csharp
    values:
    - value: public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.SyntaxToken asyncKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.SyntaxToken arrowToken, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body);
  - lang: fsharp
    values:
    - value: 'static member SimpleLambdaExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode -> Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax'
  - lang: vb
    values:
    - value: Public Shared Function SimpleLambdaExpression (asyncKeyword As SyntaxToken, parameter As ParameterSyntax, arrowToken As SyntaxToken, body As CSharpSyntaxNode) As SimpleLambdaExpressionSyntax
  monikers:
  - roslyn-dotnet
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  summary: Creates a new SimpleLambdaExpressionSyntax instance.
  metadata: {}
uid: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression*
commentId: Overload:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression
namespace: Microsoft.CodeAnalysis.CSharp
name: SimpleLambdaExpression
fullName: Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression
nameWithType: SyntaxFactory.SimpleLambdaExpression
assembliesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp.dll
packagesWithMoniker:
- value: Microsoft.CodeAnalysis.CSharp v3.11.0
  monikers:
  - roslyn-dotnet-3.11.0
- value: Microsoft.CodeAnalysis.CSharp v4.0.1
  monikers:
  - roslyn-dotnet-4.0.1
- value: Microsoft.CodeAnalysis.CSharp v4.1.0
  monikers:
  - roslyn-dotnet-4.1.0
- value: Microsoft.CodeAnalysis.CSharp v4.2.0
  monikers:
  - roslyn-dotnet-4.2.0
- value: Microsoft.CodeAnalysis.CSharp v3.10.0
  monikers:
  - roslyn-dotnet-3.10.0
- value: Microsoft.CodeAnalysis.CSharp v3.8.0
  monikers:
  - roslyn-dotnet-3.8.0
- value: Microsoft.CodeAnalysis.CSharp v3.9.0
  monikers:
  - roslyn-dotnet-3.9.0
- value: Microsoft.CodeAnalysis.CSharp v3.4.0
  monikers:
  - roslyn-dotnet-3.4.0
- value: Microsoft.CodeAnalysis.CSharp v3.5.0
  monikers:
  - roslyn-dotnet-3.5.0
- value: Microsoft.CodeAnalysis.CSharp v3.6.0
  monikers:
  - roslyn-dotnet-3.6.0
- value: Microsoft.CodeAnalysis.CSharp v3.7.0
  monikers:
  - roslyn-dotnet-3.7.0
- value: Microsoft.CodeAnalysis.CSharp v3.0.0
  monikers:
  - roslyn-dotnet-3.0
- value: Microsoft.CodeAnalysis.CSharp v3.1.0
  monikers:
  - roslyn-dotnet-3.1
- value: Microsoft.CodeAnalysis.CSharp v3.2.0
  monikers:
  - roslyn-dotnet-3.2
- value: Microsoft.CodeAnalysis.CSharp v3.2.1
  monikers:
  - roslyn-dotnet-3.2.1
- value: Microsoft.CodeAnalysis.CSharp v3.3.1
  monikers:
  - roslyn-dotnet-3.3.1
devLangs:
- csharp
- vb
- fsharp
- cpp
monikers:
- roslyn-dotnet-3.11.0
- roslyn-dotnet-4.0.1
- roslyn-dotnet-4.1.0
- roslyn-dotnet-4.2.0
- roslyn-dotnet
- roslyn-dotnet-3.10.0
- roslyn-dotnet-3.8.0
- roslyn-dotnet-3.9.0
- roslyn-dotnet-3.4.0
- roslyn-dotnet-3.5.0
- roslyn-dotnet-3.6.0
- roslyn-dotnet-3.7.0
- roslyn-dotnet-3.0
- roslyn-dotnet-3.1
- roslyn-dotnet-3.2
- roslyn-dotnet-3.2.1
- roslyn-dotnet-3.3.1
metadata:
  api_name:
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression
  api_location:
  - Microsoft.CodeAnalysis.CSharp.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression
  - Microsoft::CodeAnalysis::CSharp::SyntaxFactory::SimpleLambdaExpression
  - SimpleLambdaExpression
  - SyntaxFactory.SimpleLambdaExpression
  - SyntaxFactory::SimpleLambdaExpression
  helpviewer_keywords:
  - SyntaxFactory.SimpleLambdaExpression method [.NET]
  - SimpleLambdaExpression method [.NET], class SyntaxFactory
  - SyntaxFactory.SimpleLambdaExpression(SyntaxList<AttributeListSyntax>, SyntaxTokenList, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax) method [.NET]
  - SimpleLambdaExpression(SyntaxList<AttributeListSyntax>, SyntaxTokenList, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.SimpleLambdaExpression(SyntaxList<AttributeListSyntax>, SyntaxTokenList, ParameterSyntax, BlockSyntax, ExpressionSyntax) method [.NET]
  - SimpleLambdaExpression(SyntaxList<AttributeListSyntax>, SyntaxTokenList, ParameterSyntax, BlockSyntax, ExpressionSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.SimpleLambdaExpression(SyntaxTokenList, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax) method [.NET]
  - SimpleLambdaExpression(SyntaxTokenList, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.SimpleLambdaExpression(SyntaxTokenList, ParameterSyntax, BlockSyntax, ExpressionSyntax) method [.NET]
  - SimpleLambdaExpression(SyntaxTokenList, ParameterSyntax, BlockSyntax, ExpressionSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.SimpleLambdaExpression(SyntaxToken, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax) method [.NET]
  - SimpleLambdaExpression(SyntaxToken, ParameterSyntax, SyntaxToken, BlockSyntax, ExpressionSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.SimpleLambdaExpression(ParameterSyntax, BlockSyntax, ExpressionSyntax) method [.NET]
  - SimpleLambdaExpression(ParameterSyntax, BlockSyntax, ExpressionSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.SimpleLambdaExpression(ParameterSyntax, CSharpSyntaxNode) method [.NET]
  - SimpleLambdaExpression(ParameterSyntax, CSharpSyntaxNode) method [.NET], class SyntaxFactory
  - SyntaxFactory.SimpleLambdaExpression(ParameterSyntax) method [.NET]
  - SimpleLambdaExpression(ParameterSyntax) method [.NET], class SyntaxFactory
  - SyntaxFactory.SimpleLambdaExpression(SyntaxToken, ParameterSyntax, SyntaxToken, CSharpSyntaxNode) method [.NET]
  - SimpleLambdaExpression(SyntaxToken, ParameterSyntax, SyntaxToken, CSharpSyntaxNode) method [.NET], class SyntaxFactory
  monikers:
  - roslyn-dotnet-3.11.0
  - roslyn-dotnet-4.0.1
  - roslyn-dotnet-4.1.0
  - roslyn-dotnet-4.2.0
  - roslyn-dotnet
  - roslyn-dotnet-3.10.0
  - roslyn-dotnet-3.8.0
  - roslyn-dotnet-3.9.0
  - roslyn-dotnet-3.4.0
  - roslyn-dotnet-3.5.0
  - roslyn-dotnet-3.6.0
  - roslyn-dotnet-3.7.0
  - roslyn-dotnet-3.0
  - roslyn-dotnet-3.1
  - roslyn-dotnet-3.2
  - roslyn-dotnet-3.2.1
  - roslyn-dotnet-3.3.1
